{"ast":null,"code":"/**\n * @license Angular v19.2.5\n * (c) 2010-2025 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport * as i3 from '@angular/common';\nimport { HashLocationStrategy, LocationStrategy, ViewportScroller, LOCATION_INITIALIZED, Location, PathLocationStrategy } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { ɵRuntimeError as _RuntimeError, ɵɵsanitizeUrlOrResourceUrl as __sanitizeUrlOrResourceUrl, booleanAttribute, HostListener, Input, HostBinding, Attribute, Directive, EventEmitter, Output, ContentChildren, Optional, createEnvironmentInjector, Injectable, InjectionToken, makeEnvironmentProviders, APP_BOOTSTRAP_LISTENER, ENVIRONMENT_INITIALIZER, inject, Injector, ApplicationRef, InjectFlags, APP_INITIALIZER, NgZone, SkipSelf, NgModule } from '@angular/core';\nimport { g as NavigationEnd, X as isUrlTree, t as Router, x as ActivatedRoute, Y as RouterConfigLoader, k as NavigationStart, i as NavigationSkipped, j as NavigationSkippedCode, S as Scroll, M as UrlSerializer, Z as NavigationTransitions, v as ROUTES, u as ROUTER_CONFIGURATION, _ as NAVIGATION_ERROR_HANDLER, $ as RoutedComponentInputBinder, a0 as INPUT_BINDER, a1 as createViewTransition, a2 as CREATE_VIEW_TRANSITION, a3 as VIEW_TRANSITION_OPTIONS, W as afterNextNavigation, a4 as stringifyEvent, J as DefaultUrlSerializer, w as ChildrenOutletContexts, R as RouterOutlet, ɵ as _EmptyOutletComponent } from './router-LSBBtrLI.mjs';\nimport { Subject, of, from } from 'rxjs';\nimport { mergeAll, catchError, filter, concatMap, mergeMap } from 'rxjs/operators';\n\n/**\n * @description\n *\n * When applied to an element in a template, makes that element a link\n * that initiates navigation to a route. Navigation opens one or more routed components\n * in one or more `<router-outlet>` locations on the page.\n *\n * Given a route configuration `[{ path: 'user/:name', component: UserCmp }]`,\n * the following creates a static link to the route:\n * `<a routerLink=\"/user/bob\">link to user component</a>`\n *\n * You can use dynamic values to generate the link.\n * For a dynamic link, pass an array of path segments,\n * followed by the params for each segment.\n * For example, `['/team', teamId, 'user', userName, {details: true}]`\n * generates a link to `/team/11/user/bob;details=true`.\n *\n * Multiple static segments can be merged into one term and combined with dynamic segments.\n * For example, `['/team/11/user', userName, {details: true}]`\n *\n * The input that you provide to the link is treated as a delta to the current URL.\n * For instance, suppose the current URL is `/user/(box//aux:team)`.\n * The link `<a [routerLink]=\"['/user/jim']\">Jim</a>` creates the URL\n * `/user/(jim//aux:team)`.\n * See {@link Router#createUrlTree} for more information.\n *\n * @usageNotes\n *\n * You can use absolute or relative paths in a link, set query parameters,\n * control how parameters are handled, and keep a history of navigation states.\n *\n * ### Relative link paths\n *\n * The first segment name can be prepended with `/`, `./`, or `../`.\n * * If the first segment begins with `/`, the router looks up the route from the root of the\n *   app.\n * * If the first segment begins with `./`, or doesn't begin with a slash, the router\n *   looks in the children of the current activated route.\n * * If the first segment begins with `../`, the router goes up one level in the route tree.\n *\n * ### Setting and handling query params and fragments\n *\n * The following link adds a query parameter and a fragment to the generated URL:\n *\n * ```html\n * <a [routerLink]=\"['/user/bob']\" [queryParams]=\"{debug: true}\" fragment=\"education\">\n *   link to user component\n * </a>\n * ```\n * By default, the directive constructs the new URL using the given query parameters.\n * The example generates the link: `/user/bob?debug=true#education`.\n *\n * You can instruct the directive to handle query parameters differently\n * by specifying the `queryParamsHandling` option in the link.\n * Allowed values are:\n *\n *  - `'merge'`: Merge the given `queryParams` into the current query params.\n *  - `'preserve'`: Preserve the current query params.\n *\n * For example:\n *\n * ```html\n * <a [routerLink]=\"['/user/bob']\" [queryParams]=\"{debug: true}\" queryParamsHandling=\"merge\">\n *   link to user component\n * </a>\n * ```\n *\n * `queryParams`, `fragment`, `queryParamsHandling`, `preserveFragment`, and `relativeTo`\n * cannot be used when the `routerLink` input is a `UrlTree`.\n *\n * See {@link UrlCreationOptions#queryParamsHandling}.\n *\n * ### Preserving navigation history\n *\n * You can provide a `state` value to be persisted to the browser's\n * [`History.state` property](https://developer.mozilla.org/en-US/docs/Web/API/History#Properties).\n * For example:\n *\n * ```html\n * <a [routerLink]=\"['/user/bob']\" [state]=\"{tracingId: 123}\">\n *   link to user component\n * </a>\n * ```\n *\n * Use {@link Router#getCurrentNavigation} to retrieve a saved\n * navigation-state value. For example, to capture the `tracingId` during the `NavigationStart`\n * event:\n *\n * ```ts\n * // Get NavigationStart events\n * router.events.pipe(filter(e => e instanceof NavigationStart)).subscribe(e => {\n *   const navigation = router.getCurrentNavigation();\n *   tracingService.trace({id: navigation.extras.state.tracingId});\n * });\n * ```\n *\n * @ngModule RouterModule\n *\n * @publicApi\n */\nclass RouterLink {\n  router;\n  route;\n  tabIndexAttribute;\n  renderer;\n  el;\n  locationStrategy;\n  /**\n   * Represents an `href` attribute value applied to a host element,\n   * when a host element is `<a>`. For other tags, the value is `null`.\n   */\n  href = null;\n  /**\n   * Represents the `target` attribute on a host element.\n   * This is only used when the host element is an `<a>` tag.\n   */\n  target;\n  /**\n   * Passed to {@link Router#createUrlTree} as part of the\n   * `UrlCreationOptions`.\n   * @see {@link UrlCreationOptions#queryParams}\n   * @see {@link Router#createUrlTree}\n   */\n  queryParams;\n  /**\n   * Passed to {@link Router#createUrlTree} as part of the\n   * `UrlCreationOptions`.\n   * @see {@link UrlCreationOptions#fragment}\n   * @see {@link Router#createUrlTree}\n   */\n  fragment;\n  /**\n   * Passed to {@link Router#createUrlTree} as part of the\n   * `UrlCreationOptions`.\n   * @see {@link UrlCreationOptions#queryParamsHandling}\n   * @see {@link Router#createUrlTree}\n   */\n  queryParamsHandling;\n  /**\n   * Passed to {@link Router#navigateByUrl} as part of the\n   * `NavigationBehaviorOptions`.\n   * @see {@link NavigationBehaviorOptions#state}\n   * @see {@link Router#navigateByUrl}\n   */\n  state;\n  /**\n   * Passed to {@link Router#navigateByUrl} as part of the\n   * `NavigationBehaviorOptions`.\n   * @see {@link NavigationBehaviorOptions#info}\n   * @see {@link Router#navigateByUrl}\n   */\n  info;\n  /**\n   * Passed to {@link Router#createUrlTree} as part of the\n   * `UrlCreationOptions`.\n   * Specify a value here when you do not want to use the default value\n   * for `routerLink`, which is the current activated route.\n   * Note that a value of `undefined` here will use the `routerLink` default.\n   * @see {@link UrlCreationOptions#relativeTo}\n   * @see {@link Router#createUrlTree}\n   */\n  relativeTo;\n  /** Whether a host element is an `<a>` tag. */\n  isAnchorElement;\n  subscription;\n  /** @internal */\n  onChanges = new Subject();\n  constructor(router, route, tabIndexAttribute, renderer, el, locationStrategy) {\n    this.router = router;\n    this.route = route;\n    this.tabIndexAttribute = tabIndexAttribute;\n    this.renderer = renderer;\n    this.el = el;\n    this.locationStrategy = locationStrategy;\n    const tagName = el.nativeElement.tagName?.toLowerCase();\n    this.isAnchorElement = tagName === 'a' || tagName === 'area';\n    if (this.isAnchorElement) {\n      this.subscription = router.events.subscribe(s => {\n        if (s instanceof NavigationEnd) {\n          this.updateHref();\n        }\n      });\n    } else {\n      this.setTabIndexIfNotOnNativeEl('0');\n    }\n  }\n  /**\n   * Passed to {@link Router#createUrlTree} as part of the\n   * `UrlCreationOptions`.\n   * @see {@link UrlCreationOptions#preserveFragment}\n   * @see {@link Router#createUrlTree}\n   */\n  preserveFragment = false;\n  /**\n   * Passed to {@link Router#navigateByUrl} as part of the\n   * `NavigationBehaviorOptions`.\n   * @see {@link NavigationBehaviorOptions#skipLocationChange}\n   * @see {@link Router#navigateByUrl}\n   */\n  skipLocationChange = false;\n  /**\n   * Passed to {@link Router#navigateByUrl} as part of the\n   * `NavigationBehaviorOptions`.\n   * @see {@link NavigationBehaviorOptions#replaceUrl}\n   * @see {@link Router#navigateByUrl}\n   */\n  replaceUrl = false;\n  /**\n   * Modifies the tab index if there was not a tabindex attribute on the element during\n   * instantiation.\n   */\n  setTabIndexIfNotOnNativeEl(newTabIndex) {\n    if (this.tabIndexAttribute != null /* both `null` and `undefined` */ || this.isAnchorElement) {\n      return;\n    }\n    this.applyAttributeValue('tabindex', newTabIndex);\n  }\n  /** @nodoc */\n  // TODO(atscott): Remove changes parameter in major version as a breaking change.\n  ngOnChanges(changes) {\n    if (ngDevMode && isUrlTree(this.routerLinkInput) && (this.fragment !== undefined || this.queryParams || this.queryParamsHandling || this.preserveFragment || this.relativeTo)) {\n      throw new _RuntimeError(4016 /* RuntimeErrorCode.INVALID_ROUTER_LINK_INPUTS */, 'Cannot configure queryParams or fragment when using a UrlTree as the routerLink input value.');\n    }\n    if (this.isAnchorElement) {\n      this.updateHref();\n    }\n    // This is subscribed to by `RouterLinkActive` so that it knows to update when there are changes\n    // to the RouterLinks it's tracking.\n    this.onChanges.next(this);\n  }\n  routerLinkInput = null;\n  /**\n   * Commands to pass to {@link Router#createUrlTree} or a `UrlTree`.\n   *   - **array**: commands to pass to {@link Router#createUrlTree}.\n   *   - **string**: shorthand for array of commands with just the string, i.e. `['/route']`\n   *   - **UrlTree**: a `UrlTree` for this link rather than creating one from the commands\n   *     and other inputs that correspond to properties of `UrlCreationOptions`.\n   *   - **null|undefined**: effectively disables the `routerLink`\n   * @see {@link Router#createUrlTree}\n   */\n  set routerLink(commandsOrUrlTree) {\n    if (commandsOrUrlTree == null) {\n      this.routerLinkInput = null;\n      this.setTabIndexIfNotOnNativeEl(null);\n    } else {\n      if (isUrlTree(commandsOrUrlTree)) {\n        this.routerLinkInput = commandsOrUrlTree;\n      } else {\n        this.routerLinkInput = Array.isArray(commandsOrUrlTree) ? commandsOrUrlTree : [commandsOrUrlTree];\n      }\n      this.setTabIndexIfNotOnNativeEl('0');\n    }\n  }\n  /** @nodoc */\n  onClick(button, ctrlKey, shiftKey, altKey, metaKey) {\n    const urlTree = this.urlTree;\n    if (urlTree === null) {\n      return true;\n    }\n    if (this.isAnchorElement) {\n      if (button !== 0 || ctrlKey || shiftKey || altKey || metaKey) {\n        return true;\n      }\n      if (typeof this.target === 'string' && this.target != '_self') {\n        return true;\n      }\n    }\n    const extras = {\n      skipLocationChange: this.skipLocationChange,\n      replaceUrl: this.replaceUrl,\n      state: this.state,\n      info: this.info\n    };\n    this.router.navigateByUrl(urlTree, extras);\n    // Return `false` for `<a>` elements to prevent default action\n    // and cancel the native behavior, since the navigation is handled\n    // by the Router.\n    return !this.isAnchorElement;\n  }\n  /** @nodoc */\n  ngOnDestroy() {\n    this.subscription?.unsubscribe();\n  }\n  updateHref() {\n    const urlTree = this.urlTree;\n    this.href = urlTree !== null && this.locationStrategy ? this.locationStrategy?.prepareExternalUrl(this.router.serializeUrl(urlTree)) : null;\n    const sanitizedValue = this.href === null ? null :\n    // This class represents a directive that can be added to both `<a>` elements,\n    // as well as other elements. As a result, we can't define security context at\n    // compile time. So the security context is deferred to runtime.\n    // The `ɵɵsanitizeUrlOrResourceUrl` selects the necessary sanitizer function\n    // based on the tag and property names. The logic mimics the one from\n    // `packages/compiler/src/schema/dom_security_schema.ts`, which is used at compile time.\n    //\n    // Note: we should investigate whether we can switch to using `@HostBinding('attr.href')`\n    // instead of applying a value via a renderer, after a final merge of the\n    // `RouterLinkWithHref` directive.\n    __sanitizeUrlOrResourceUrl(this.href, this.el.nativeElement.tagName.toLowerCase(), 'href');\n    this.applyAttributeValue('href', sanitizedValue);\n  }\n  applyAttributeValue(attrName, attrValue) {\n    const renderer = this.renderer;\n    const nativeElement = this.el.nativeElement;\n    if (attrValue !== null) {\n      renderer.setAttribute(nativeElement, attrName, attrValue);\n    } else {\n      renderer.removeAttribute(nativeElement, attrName);\n    }\n  }\n  get urlTree() {\n    if (this.routerLinkInput === null) {\n      return null;\n    } else if (isUrlTree(this.routerLinkInput)) {\n      return this.routerLinkInput;\n    }\n    return this.router.createUrlTree(this.routerLinkInput, {\n      // If the `relativeTo` input is not defined, we want to use `this.route` by default.\n      // Otherwise, we should use the value provided by the user in the input.\n      relativeTo: this.relativeTo !== undefined ? this.relativeTo : this.route,\n      queryParams: this.queryParams,\n      fragment: this.fragment,\n      queryParamsHandling: this.queryParamsHandling,\n      preserveFragment: this.preserveFragment\n    });\n  }\n  static ɵfac = function RouterLink_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || RouterLink)(i0.ɵɵdirectiveInject(Router), i0.ɵɵdirectiveInject(ActivatedRoute), i0.ɵɵinjectAttribute('tabindex'), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i3.LocationStrategy));\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: RouterLink,\n    selectors: [[\"\", \"routerLink\", \"\"]],\n    hostVars: 1,\n    hostBindings: function RouterLink_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"click\", function RouterLink_click_HostBindingHandler($event) {\n          return ctx.onClick($event.button, $event.ctrlKey, $event.shiftKey, $event.altKey, $event.metaKey);\n        });\n      }\n      if (rf & 2) {\n        i0.ɵɵattribute(\"target\", ctx.target);\n      }\n    },\n    inputs: {\n      target: \"target\",\n      queryParams: \"queryParams\",\n      fragment: \"fragment\",\n      queryParamsHandling: \"queryParamsHandling\",\n      state: \"state\",\n      info: \"info\",\n      relativeTo: \"relativeTo\",\n      preserveFragment: [2, \"preserveFragment\", \"preserveFragment\", booleanAttribute],\n      skipLocationChange: [2, \"skipLocationChange\", \"skipLocationChange\", booleanAttribute],\n      replaceUrl: [2, \"replaceUrl\", \"replaceUrl\", booleanAttribute],\n      routerLink: \"routerLink\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RouterLink, [{\n    type: Directive,\n    args: [{\n      selector: '[routerLink]'\n    }]\n  }], () => [{\n    type: Router\n  }, {\n    type: ActivatedRoute\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Attribute,\n      args: ['tabindex']\n    }]\n  }, {\n    type: i0.Renderer2\n  }, {\n    type: i0.ElementRef\n  }, {\n    type: i3.LocationStrategy\n  }], {\n    target: [{\n      type: HostBinding,\n      args: ['attr.target']\n    }, {\n      type: Input\n    }],\n    queryParams: [{\n      type: Input\n    }],\n    fragment: [{\n      type: Input\n    }],\n    queryParamsHandling: [{\n      type: Input\n    }],\n    state: [{\n      type: Input\n    }],\n    info: [{\n      type: Input\n    }],\n    relativeTo: [{\n      type: Input\n    }],\n    preserveFragment: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    skipLocationChange: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    replaceUrl: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    routerLink: [{\n      type: Input\n    }],\n    onClick: [{\n      type: HostListener,\n      args: ['click', ['$event.button', '$event.ctrlKey', '$event.shiftKey', '$event.altKey', '$event.metaKey']]\n    }]\n  });\n})();\n\n/**\n *\n * @description\n *\n * Tracks whether the linked route of an element is currently active, and allows you\n * to specify one or more CSS classes to add to the element when the linked route\n * is active.\n *\n * Use this directive to create a visual distinction for elements associated with an active route.\n * For example, the following code highlights the word \"Bob\" when the router\n * activates the associated route:\n *\n * ```html\n * <a routerLink=\"/user/bob\" routerLinkActive=\"active-link\">Bob</a>\n * ```\n *\n * Whenever the URL is either '/user' or '/user/bob', the \"active-link\" class is\n * added to the anchor tag. If the URL changes, the class is removed.\n *\n * You can set more than one class using a space-separated string or an array.\n * For example:\n *\n * ```html\n * <a routerLink=\"/user/bob\" routerLinkActive=\"class1 class2\">Bob</a>\n * <a routerLink=\"/user/bob\" [routerLinkActive]=\"['class1', 'class2']\">Bob</a>\n * ```\n *\n * To add the classes only when the URL matches the link exactly, add the option `exact: true`:\n *\n * ```html\n * <a routerLink=\"/user/bob\" routerLinkActive=\"active-link\" [routerLinkActiveOptions]=\"{exact:\n * true}\">Bob</a>\n * ```\n *\n * To directly check the `isActive` status of the link, assign the `RouterLinkActive`\n * instance to a template variable.\n * For example, the following checks the status without assigning any CSS classes:\n *\n * ```html\n * <a routerLink=\"/user/bob\" routerLinkActive #rla=\"routerLinkActive\">\n *   Bob {{ rla.isActive ? '(already open)' : ''}}\n * </a>\n * ```\n *\n * You can apply the `RouterLinkActive` directive to an ancestor of linked elements.\n * For example, the following sets the active-link class on the `<div>`  parent tag\n * when the URL is either '/user/jim' or '/user/bob'.\n *\n * ```html\n * <div routerLinkActive=\"active-link\" [routerLinkActiveOptions]=\"{exact: true}\">\n *   <a routerLink=\"/user/jim\">Jim</a>\n *   <a routerLink=\"/user/bob\">Bob</a>\n * </div>\n * ```\n *\n * The `RouterLinkActive` directive can also be used to set the aria-current attribute\n * to provide an alternative distinction for active elements to visually impaired users.\n *\n * For example, the following code adds the 'active' class to the Home Page link when it is\n * indeed active and in such case also sets its aria-current attribute to 'page':\n *\n * ```html\n * <a routerLink=\"/\" routerLinkActive=\"active\" ariaCurrentWhenActive=\"page\">Home Page</a>\n * ```\n *\n * @ngModule RouterModule\n *\n * @publicApi\n */\nclass RouterLinkActive {\n  router;\n  element;\n  renderer;\n  cdr;\n  link;\n  links;\n  classes = [];\n  routerEventsSubscription;\n  linkInputChangesSubscription;\n  _isActive = false;\n  get isActive() {\n    return this._isActive;\n  }\n  /**\n   * Options to configure how to determine if the router link is active.\n   *\n   * These options are passed to the `Router.isActive()` function.\n   *\n   * @see {@link Router#isActive}\n   */\n  routerLinkActiveOptions = {\n    exact: false\n  };\n  /**\n   * Aria-current attribute to apply when the router link is active.\n   *\n   * Possible values: `'page'` | `'step'` | `'location'` | `'date'` | `'time'` | `true` | `false`.\n   *\n   * @see {@link https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-current}\n   */\n  ariaCurrentWhenActive;\n  /**\n   *\n   * You can use the output `isActiveChange` to get notified each time the link becomes\n   * active or inactive.\n   *\n   * Emits:\n   * true  -> Route is active\n   * false -> Route is inactive\n   *\n   * ```html\n   * <a\n   *  routerLink=\"/user/bob\"\n   *  routerLinkActive=\"active-link\"\n   *  (isActiveChange)=\"this.onRouterLinkActive($event)\">Bob</a>\n   * ```\n   */\n  isActiveChange = new EventEmitter();\n  constructor(router, element, renderer, cdr, link) {\n    this.router = router;\n    this.element = element;\n    this.renderer = renderer;\n    this.cdr = cdr;\n    this.link = link;\n    this.routerEventsSubscription = router.events.subscribe(s => {\n      if (s instanceof NavigationEnd) {\n        this.update();\n      }\n    });\n  }\n  /** @nodoc */\n  ngAfterContentInit() {\n    // `of(null)` is used to force subscribe body to execute once immediately (like `startWith`).\n    of(this.links.changes, of(null)).pipe(mergeAll()).subscribe(_ => {\n      this.update();\n      this.subscribeToEachLinkOnChanges();\n    });\n  }\n  subscribeToEachLinkOnChanges() {\n    this.linkInputChangesSubscription?.unsubscribe();\n    const allLinkChanges = [...this.links.toArray(), this.link].filter(link => !!link).map(link => link.onChanges);\n    this.linkInputChangesSubscription = from(allLinkChanges).pipe(mergeAll()).subscribe(link => {\n      if (this._isActive !== this.isLinkActive(this.router)(link)) {\n        this.update();\n      }\n    });\n  }\n  set routerLinkActive(data) {\n    const classes = Array.isArray(data) ? data : data.split(' ');\n    this.classes = classes.filter(c => !!c);\n  }\n  /** @nodoc */\n  ngOnChanges(changes) {\n    this.update();\n  }\n  /** @nodoc */\n  ngOnDestroy() {\n    this.routerEventsSubscription.unsubscribe();\n    this.linkInputChangesSubscription?.unsubscribe();\n  }\n  update() {\n    if (!this.links || !this.router.navigated) return;\n    queueMicrotask(() => {\n      const hasActiveLinks = this.hasActiveLinks();\n      this.classes.forEach(c => {\n        if (hasActiveLinks) {\n          this.renderer.addClass(this.element.nativeElement, c);\n        } else {\n          this.renderer.removeClass(this.element.nativeElement, c);\n        }\n      });\n      if (hasActiveLinks && this.ariaCurrentWhenActive !== undefined) {\n        this.renderer.setAttribute(this.element.nativeElement, 'aria-current', this.ariaCurrentWhenActive.toString());\n      } else {\n        this.renderer.removeAttribute(this.element.nativeElement, 'aria-current');\n      }\n      // Only emit change if the active state changed.\n      if (this._isActive !== hasActiveLinks) {\n        this._isActive = hasActiveLinks;\n        this.cdr.markForCheck();\n        // Emit on isActiveChange after classes are updated\n        this.isActiveChange.emit(hasActiveLinks);\n      }\n    });\n  }\n  isLinkActive(router) {\n    const options = isActiveMatchOptions(this.routerLinkActiveOptions) ? this.routerLinkActiveOptions :\n    // While the types should disallow `undefined` here, it's possible without strict inputs\n    this.routerLinkActiveOptions.exact || false;\n    return link => {\n      const urlTree = link.urlTree;\n      return urlTree ? router.isActive(urlTree, options) : false;\n    };\n  }\n  hasActiveLinks() {\n    const isActiveCheckFn = this.isLinkActive(this.router);\n    return this.link && isActiveCheckFn(this.link) || this.links.some(isActiveCheckFn);\n  }\n  static ɵfac = function RouterLinkActive_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || RouterLinkActive)(i0.ɵɵdirectiveInject(Router), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(RouterLink, 8));\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: RouterLinkActive,\n    selectors: [[\"\", \"routerLinkActive\", \"\"]],\n    contentQueries: function RouterLinkActive_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, RouterLink, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.links = _t);\n      }\n    },\n    inputs: {\n      routerLinkActiveOptions: \"routerLinkActiveOptions\",\n      ariaCurrentWhenActive: \"ariaCurrentWhenActive\",\n      routerLinkActive: \"routerLinkActive\"\n    },\n    outputs: {\n      isActiveChange: \"isActiveChange\"\n    },\n    exportAs: [\"routerLinkActive\"],\n    features: [i0.ɵɵNgOnChangesFeature]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RouterLinkActive, [{\n    type: Directive,\n    args: [{\n      selector: '[routerLinkActive]',\n      exportAs: 'routerLinkActive'\n    }]\n  }], () => [{\n    type: Router\n  }, {\n    type: i0.ElementRef\n  }, {\n    type: i0.Renderer2\n  }, {\n    type: i0.ChangeDetectorRef\n  }, {\n    type: RouterLink,\n    decorators: [{\n      type: Optional\n    }]\n  }], {\n    links: [{\n      type: ContentChildren,\n      args: [RouterLink, {\n        descendants: true\n      }]\n    }],\n    routerLinkActiveOptions: [{\n      type: Input\n    }],\n    ariaCurrentWhenActive: [{\n      type: Input\n    }],\n    isActiveChange: [{\n      type: Output\n    }],\n    routerLinkActive: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * Use instead of `'paths' in options` to be compatible with property renaming\n */\nfunction isActiveMatchOptions(options) {\n  return !!options.paths;\n}\n\n/**\n * @description\n *\n * Provides a preloading strategy.\n *\n * @publicApi\n */\nclass PreloadingStrategy {}\n/**\n * @description\n *\n * Provides a preloading strategy that preloads all modules as quickly as possible.\n *\n * ```ts\n * RouterModule.forRoot(ROUTES, {preloadingStrategy: PreloadAllModules})\n * ```\n *\n * @publicApi\n */\nclass PreloadAllModules {\n  preload(route, fn) {\n    return fn().pipe(catchError(() => of(null)));\n  }\n  static ɵfac = function PreloadAllModules_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || PreloadAllModules)();\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: PreloadAllModules,\n    factory: PreloadAllModules.ɵfac,\n    providedIn: 'root'\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PreloadAllModules, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n/**\n * @description\n *\n * Provides a preloading strategy that does not preload any modules.\n *\n * This strategy is enabled by default.\n *\n * @publicApi\n */\nclass NoPreloading {\n  preload(route, fn) {\n    return of(null);\n  }\n  static ɵfac = function NoPreloading_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || NoPreloading)();\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: NoPreloading,\n    factory: NoPreloading.ɵfac,\n    providedIn: 'root'\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NoPreloading, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n/**\n * The preloader optimistically loads all router configurations to\n * make navigations into lazily-loaded sections of the application faster.\n *\n * The preloader runs in the background. When the router bootstraps, the preloader\n * starts listening to all navigation events. After every such event, the preloader\n * will check if any configurations can be loaded lazily.\n *\n * If a route is protected by `canLoad` guards, the preloaded will not load it.\n *\n * @publicApi\n */\nclass RouterPreloader {\n  router;\n  injector;\n  preloadingStrategy;\n  loader;\n  subscription;\n  constructor(router, compiler, injector, preloadingStrategy, loader) {\n    this.router = router;\n    this.injector = injector;\n    this.preloadingStrategy = preloadingStrategy;\n    this.loader = loader;\n  }\n  setUpPreloading() {\n    this.subscription = this.router.events.pipe(filter(e => e instanceof NavigationEnd), concatMap(() => this.preload())).subscribe(() => {});\n  }\n  preload() {\n    return this.processRoutes(this.injector, this.router.config);\n  }\n  /** @nodoc */\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n  processRoutes(injector, routes) {\n    const res = [];\n    for (const route of routes) {\n      if (route.providers && !route._injector) {\n        route._injector = createEnvironmentInjector(route.providers, injector, `Route: ${route.path}`);\n      }\n      const injectorForCurrentRoute = route._injector ?? injector;\n      const injectorForChildren = route._loadedInjector ?? injectorForCurrentRoute;\n      // Note that `canLoad` is only checked as a condition that prevents `loadChildren` and not\n      // `loadComponent`. `canLoad` guards only block loading of child routes by design. This\n      // happens as a consequence of needing to descend into children for route matching immediately\n      // while component loading is deferred until route activation. Because `canLoad` guards can\n      // have side effects, we cannot execute them here so we instead skip preloading altogether\n      // when present. Lastly, it remains to be decided whether `canLoad` should behave this way\n      // at all. Code splitting and lazy loading is separate from client-side authorization checks\n      // and should not be used as a security measure to prevent loading of code.\n      if (route.loadChildren && !route._loadedRoutes && route.canLoad === undefined || route.loadComponent && !route._loadedComponent) {\n        res.push(this.preloadConfig(injectorForCurrentRoute, route));\n      }\n      if (route.children || route._loadedRoutes) {\n        res.push(this.processRoutes(injectorForChildren, route.children ?? route._loadedRoutes));\n      }\n    }\n    return from(res).pipe(mergeAll());\n  }\n  preloadConfig(injector, route) {\n    return this.preloadingStrategy.preload(route, () => {\n      let loadedChildren$;\n      if (route.loadChildren && route.canLoad === undefined) {\n        loadedChildren$ = this.loader.loadChildren(injector, route);\n      } else {\n        loadedChildren$ = of(null);\n      }\n      const recursiveLoadChildren$ = loadedChildren$.pipe(mergeMap(config => {\n        if (config === null) {\n          return of(void 0);\n        }\n        route._loadedRoutes = config.routes;\n        route._loadedInjector = config.injector;\n        // If the loaded config was a module, use that as the module/module injector going\n        // forward. Otherwise, continue using the current module/module injector.\n        return this.processRoutes(config.injector ?? injector, config.routes);\n      }));\n      if (route.loadComponent && !route._loadedComponent) {\n        const loadComponent$ = this.loader.loadComponent(route);\n        return from([recursiveLoadChildren$, loadComponent$]).pipe(mergeAll());\n      } else {\n        return recursiveLoadChildren$;\n      }\n    });\n  }\n  static ɵfac = function RouterPreloader_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || RouterPreloader)(i0.ɵɵinject(Router), i0.ɵɵinject(i0.Compiler), i0.ɵɵinject(i0.EnvironmentInjector), i0.ɵɵinject(PreloadingStrategy), i0.ɵɵinject(RouterConfigLoader));\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: RouterPreloader,\n    factory: RouterPreloader.ɵfac,\n    providedIn: 'root'\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RouterPreloader, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], () => [{\n    type: Router\n  }, {\n    type: i0.Compiler\n  }, {\n    type: i0.EnvironmentInjector\n  }, {\n    type: PreloadingStrategy\n  }, {\n    type: RouterConfigLoader\n  }], null);\n})();\nconst ROUTER_SCROLLER = new InjectionToken('');\nclass RouterScroller {\n  urlSerializer;\n  transitions;\n  viewportScroller;\n  zone;\n  options;\n  routerEventsSubscription;\n  scrollEventsSubscription;\n  lastId = 0;\n  lastSource = 'imperative';\n  restoredId = 0;\n  store = {};\n  /** @nodoc */\n  constructor(urlSerializer, transitions, viewportScroller, zone, options = {}) {\n    this.urlSerializer = urlSerializer;\n    this.transitions = transitions;\n    this.viewportScroller = viewportScroller;\n    this.zone = zone;\n    this.options = options;\n    // Default both options to 'disabled'\n    options.scrollPositionRestoration ||= 'disabled';\n    options.anchorScrolling ||= 'disabled';\n  }\n  init() {\n    // we want to disable the automatic scrolling because having two places\n    // responsible for scrolling results race conditions, especially given\n    // that browser don't implement this behavior consistently\n    if (this.options.scrollPositionRestoration !== 'disabled') {\n      this.viewportScroller.setHistoryScrollRestoration('manual');\n    }\n    this.routerEventsSubscription = this.createScrollEvents();\n    this.scrollEventsSubscription = this.consumeScrollEvents();\n  }\n  createScrollEvents() {\n    return this.transitions.events.subscribe(e => {\n      if (e instanceof NavigationStart) {\n        // store the scroll position of the current stable navigations.\n        this.store[this.lastId] = this.viewportScroller.getScrollPosition();\n        this.lastSource = e.navigationTrigger;\n        this.restoredId = e.restoredState ? e.restoredState.navigationId : 0;\n      } else if (e instanceof NavigationEnd) {\n        this.lastId = e.id;\n        this.scheduleScrollEvent(e, this.urlSerializer.parse(e.urlAfterRedirects).fragment);\n      } else if (e instanceof NavigationSkipped && e.code === NavigationSkippedCode.IgnoredSameUrlNavigation) {\n        this.lastSource = undefined;\n        this.restoredId = 0;\n        this.scheduleScrollEvent(e, this.urlSerializer.parse(e.url).fragment);\n      }\n    });\n  }\n  consumeScrollEvents() {\n    return this.transitions.events.subscribe(e => {\n      if (!(e instanceof Scroll)) return;\n      // a popstate event. The pop state event will always ignore anchor scrolling.\n      if (e.position) {\n        if (this.options.scrollPositionRestoration === 'top') {\n          this.viewportScroller.scrollToPosition([0, 0]);\n        } else if (this.options.scrollPositionRestoration === 'enabled') {\n          this.viewportScroller.scrollToPosition(e.position);\n        }\n        // imperative navigation \"forward\"\n      } else {\n        if (e.anchor && this.options.anchorScrolling === 'enabled') {\n          this.viewportScroller.scrollToAnchor(e.anchor);\n        } else if (this.options.scrollPositionRestoration !== 'disabled') {\n          this.viewportScroller.scrollToPosition([0, 0]);\n        }\n      }\n    });\n  }\n  scheduleScrollEvent(routerEvent, anchor) {\n    this.zone.runOutsideAngular(() => {\n      // The scroll event needs to be delayed until after change detection. Otherwise, we may\n      // attempt to restore the scroll position before the router outlet has fully rendered the\n      // component by executing its update block of the template function.\n      setTimeout(() => {\n        this.zone.run(() => {\n          this.transitions.events.next(new Scroll(routerEvent, this.lastSource === 'popstate' ? this.store[this.restoredId] : null, anchor));\n        });\n      }, 0);\n    });\n  }\n  /** @nodoc */\n  ngOnDestroy() {\n    this.routerEventsSubscription?.unsubscribe();\n    this.scrollEventsSubscription?.unsubscribe();\n  }\n  static ɵfac = function RouterScroller_Factory(__ngFactoryType__) {\n    i0.ɵɵinvalidFactory();\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: RouterScroller,\n    factory: RouterScroller.ɵfac\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RouterScroller, [{\n    type: Injectable\n  }], () => [{\n    type: UrlSerializer\n  }, {\n    type: NavigationTransitions\n  }, {\n    type: i3.ViewportScroller\n  }, {\n    type: i0.NgZone\n  }, {\n    type: undefined\n  }], null);\n})();\n\n/**\n * Sets up providers necessary to enable `Router` functionality for the application.\n * Allows to configure a set of routes as well as extra features that should be enabled.\n *\n * @usageNotes\n *\n * Basic example of how you can add a Router to your application:\n * ```ts\n * const appRoutes: Routes = [];\n * bootstrapApplication(AppComponent, {\n *   providers: [provideRouter(appRoutes)]\n * });\n * ```\n *\n * You can also enable optional features in the Router by adding functions from the `RouterFeatures`\n * type:\n * ```ts\n * const appRoutes: Routes = [];\n * bootstrapApplication(AppComponent,\n *   {\n *     providers: [\n *       provideRouter(appRoutes,\n *         withDebugTracing(),\n *         withRouterConfig({paramsInheritanceStrategy: 'always'}))\n *     ]\n *   }\n * );\n * ```\n *\n * @see {@link RouterFeatures}\n *\n * @publicApi\n * @param routes A set of `Route`s to use for the application routing table.\n * @param features Optional features to configure additional router behaviors.\n * @returns A set of providers to setup a Router.\n */\nfunction provideRouter(routes, ...features) {\n  return makeEnvironmentProviders([{\n    provide: ROUTES,\n    multi: true,\n    useValue: routes\n  }, typeof ngDevMode === 'undefined' || ngDevMode ? {\n    provide: ROUTER_IS_PROVIDED,\n    useValue: true\n  } : [], {\n    provide: ActivatedRoute,\n    useFactory: rootRoute,\n    deps: [Router]\n  }, {\n    provide: APP_BOOTSTRAP_LISTENER,\n    multi: true,\n    useFactory: getBootstrapListener\n  }, features.map(feature => feature.ɵproviders)]);\n}\nfunction rootRoute(router) {\n  return router.routerState.root;\n}\n/**\n * Helper function to create an object that represents a Router feature.\n */\nfunction routerFeature(kind, providers) {\n  return {\n    ɵkind: kind,\n    ɵproviders: providers\n  };\n}\n/**\n * An Injection token used to indicate whether `provideRouter` or `RouterModule.forRoot` was ever\n * called.\n */\nconst ROUTER_IS_PROVIDED = new InjectionToken('', {\n  providedIn: 'root',\n  factory: () => false\n});\nconst routerIsProvidedDevModeCheck = {\n  provide: ENVIRONMENT_INITIALIZER,\n  multi: true,\n  useFactory() {\n    return () => {\n      if (!inject(ROUTER_IS_PROVIDED)) {\n        console.warn('`provideRoutes` was called without `provideRouter` or `RouterModule.forRoot`. ' + 'This is likely a mistake.');\n      }\n    };\n  }\n};\n/**\n * Registers a DI provider for a set of routes.\n * @param routes The route configuration to provide.\n *\n * @usageNotes\n *\n * ```ts\n * @NgModule({\n *   providers: [provideRoutes(ROUTES)]\n * })\n * class LazyLoadedChildModule {}\n * ```\n *\n * @deprecated If necessary, provide routes using the `ROUTES` `InjectionToken`.\n * @see {@link ROUTES}\n * @publicApi\n */\nfunction provideRoutes(routes) {\n  return [{\n    provide: ROUTES,\n    multi: true,\n    useValue: routes\n  }, typeof ngDevMode === 'undefined' || ngDevMode ? routerIsProvidedDevModeCheck : []];\n}\n/**\n * Enables customizable scrolling behavior for router navigations.\n *\n * @usageNotes\n *\n * Basic example of how you can enable scrolling feature:\n * ```ts\n * const appRoutes: Routes = [];\n * bootstrapApplication(AppComponent,\n *   {\n *     providers: [\n *       provideRouter(appRoutes, withInMemoryScrolling())\n *     ]\n *   }\n * );\n * ```\n *\n * @see {@link provideRouter}\n * @see {@link ViewportScroller}\n *\n * @publicApi\n * @param options Set of configuration parameters to customize scrolling behavior, see\n *     `InMemoryScrollingOptions` for additional information.\n * @returns A set of providers for use with `provideRouter`.\n */\nfunction withInMemoryScrolling(options = {}) {\n  const providers = [{\n    provide: ROUTER_SCROLLER,\n    useFactory: () => {\n      const viewportScroller = inject(ViewportScroller);\n      const zone = inject(NgZone);\n      const transitions = inject(NavigationTransitions);\n      const urlSerializer = inject(UrlSerializer);\n      return new RouterScroller(urlSerializer, transitions, viewportScroller, zone, options);\n    }\n  }];\n  return routerFeature(4 /* RouterFeatureKind.InMemoryScrollingFeature */, providers);\n}\nfunction getBootstrapListener() {\n  const injector = inject(Injector);\n  return bootstrappedComponentRef => {\n    const ref = injector.get(ApplicationRef);\n    if (bootstrappedComponentRef !== ref.components[0]) {\n      return;\n    }\n    const router = injector.get(Router);\n    const bootstrapDone = injector.get(BOOTSTRAP_DONE);\n    if (injector.get(INITIAL_NAVIGATION) === 1 /* InitialNavigation.EnabledNonBlocking */) {\n      router.initialNavigation();\n    }\n    injector.get(ROUTER_PRELOADER, null, InjectFlags.Optional)?.setUpPreloading();\n    injector.get(ROUTER_SCROLLER, null, InjectFlags.Optional)?.init();\n    router.resetRootComponentType(ref.componentTypes[0]);\n    if (!bootstrapDone.closed) {\n      bootstrapDone.next();\n      bootstrapDone.complete();\n      bootstrapDone.unsubscribe();\n    }\n  };\n}\n/**\n * A subject used to indicate that the bootstrapping phase is done. When initial navigation is\n * `enabledBlocking`, the first navigation waits until bootstrapping is finished before continuing\n * to the activation phase.\n */\nconst BOOTSTRAP_DONE = new InjectionToken(typeof ngDevMode === 'undefined' || ngDevMode ? 'bootstrap done indicator' : '', {\n  factory: () => {\n    return new Subject();\n  }\n});\nconst INITIAL_NAVIGATION = new InjectionToken(typeof ngDevMode === 'undefined' || ngDevMode ? 'initial navigation' : '', {\n  providedIn: 'root',\n  factory: () => 1 /* InitialNavigation.EnabledNonBlocking */\n});\n/**\n * Configures initial navigation to start before the root component is created.\n *\n * The bootstrap is blocked until the initial navigation is complete. This should be set in case\n * you use [server-side rendering](guide/ssr), but do not enable [hydration](guide/hydration) for\n * your application.\n *\n * @usageNotes\n *\n * Basic example of how you can enable this navigation behavior:\n * ```ts\n * const appRoutes: Routes = [];\n * bootstrapApplication(AppComponent,\n *   {\n *     providers: [\n *       provideRouter(appRoutes, withEnabledBlockingInitialNavigation())\n *     ]\n *   }\n * );\n * ```\n *\n * @see {@link provideRouter}\n *\n * @publicApi\n * @returns A set of providers for use with `provideRouter`.\n */\nfunction withEnabledBlockingInitialNavigation() {\n  const providers = [{\n    provide: INITIAL_NAVIGATION,\n    useValue: 0 /* InitialNavigation.EnabledBlocking */\n  }, {\n    provide: APP_INITIALIZER,\n    multi: true,\n    deps: [Injector],\n    useFactory: injector => {\n      const locationInitialized = injector.get(LOCATION_INITIALIZED, Promise.resolve());\n      return () => {\n        return locationInitialized.then(() => {\n          return new Promise(resolve => {\n            const router = injector.get(Router);\n            const bootstrapDone = injector.get(BOOTSTRAP_DONE);\n            afterNextNavigation(router, () => {\n              // Unblock APP_INITIALIZER in case the initial navigation was canceled or errored\n              // without a redirect.\n              resolve(true);\n            });\n            injector.get(NavigationTransitions).afterPreactivation = () => {\n              // Unblock APP_INITIALIZER once we get to `afterPreactivation`. At this point, we\n              // assume activation will complete successfully (even though this is not\n              // guaranteed).\n              resolve(true);\n              return bootstrapDone.closed ? of(void 0) : bootstrapDone;\n            };\n            router.initialNavigation();\n          });\n        });\n      };\n    }\n  }];\n  return routerFeature(2 /* RouterFeatureKind.EnabledBlockingInitialNavigationFeature */, providers);\n}\n/**\n * Disables initial navigation.\n *\n * Use if there is a reason to have more control over when the router starts its initial navigation\n * due to some complex initialization logic.\n *\n * @usageNotes\n *\n * Basic example of how you can disable initial navigation:\n * ```ts\n * const appRoutes: Routes = [];\n * bootstrapApplication(AppComponent,\n *   {\n *     providers: [\n *       provideRouter(appRoutes, withDisabledInitialNavigation())\n *     ]\n *   }\n * );\n * ```\n *\n * @see {@link provideRouter}\n *\n * @returns A set of providers for use with `provideRouter`.\n *\n * @publicApi\n */\nfunction withDisabledInitialNavigation() {\n  const providers = [{\n    provide: APP_INITIALIZER,\n    multi: true,\n    useFactory: () => {\n      const router = inject(Router);\n      return () => {\n        router.setUpLocationChangeListener();\n      };\n    }\n  }, {\n    provide: INITIAL_NAVIGATION,\n    useValue: 2 /* InitialNavigation.Disabled */\n  }];\n  return routerFeature(3 /* RouterFeatureKind.DisabledInitialNavigationFeature */, providers);\n}\n/**\n * Enables logging of all internal navigation events to the console.\n * Extra logging might be useful for debugging purposes to inspect Router event sequence.\n *\n * @usageNotes\n *\n * Basic example of how you can enable debug tracing:\n * ```ts\n * const appRoutes: Routes = [];\n * bootstrapApplication(AppComponent,\n *   {\n *     providers: [\n *       provideRouter(appRoutes, withDebugTracing())\n *     ]\n *   }\n * );\n * ```\n *\n * @see {@link provideRouter}\n *\n * @returns A set of providers for use with `provideRouter`.\n *\n * @publicApi\n */\nfunction withDebugTracing() {\n  let providers = [];\n  if (typeof ngDevMode === 'undefined' || ngDevMode) {\n    providers = [{\n      provide: ENVIRONMENT_INITIALIZER,\n      multi: true,\n      useFactory: () => {\n        const router = inject(Router);\n        return () => router.events.subscribe(e => {\n          // tslint:disable:no-console\n          console.group?.(`Router Event: ${e.constructor.name}`);\n          console.log(stringifyEvent(e));\n          console.log(e);\n          console.groupEnd?.();\n          // tslint:enable:no-console\n        });\n      }\n    }];\n  } else {\n    providers = [];\n  }\n  return routerFeature(1 /* RouterFeatureKind.DebugTracingFeature */, providers);\n}\nconst ROUTER_PRELOADER = new InjectionToken(typeof ngDevMode === 'undefined' || ngDevMode ? 'router preloader' : '');\n/**\n * Allows to configure a preloading strategy to use. The strategy is configured by providing a\n * reference to a class that implements a `PreloadingStrategy`.\n *\n * @usageNotes\n *\n * Basic example of how you can configure preloading:\n * ```ts\n * const appRoutes: Routes = [];\n * bootstrapApplication(AppComponent,\n *   {\n *     providers: [\n *       provideRouter(appRoutes, withPreloading(PreloadAllModules))\n *     ]\n *   }\n * );\n * ```\n *\n * @see {@link provideRouter}\n *\n * @param preloadingStrategy A reference to a class that implements a `PreloadingStrategy` that\n *     should be used.\n * @returns A set of providers for use with `provideRouter`.\n *\n * @publicApi\n */\nfunction withPreloading(preloadingStrategy) {\n  const providers = [{\n    provide: ROUTER_PRELOADER,\n    useExisting: RouterPreloader\n  }, {\n    provide: PreloadingStrategy,\n    useExisting: preloadingStrategy\n  }];\n  return routerFeature(0 /* RouterFeatureKind.PreloadingFeature */, providers);\n}\n/**\n * Allows to provide extra parameters to configure Router.\n *\n * @usageNotes\n *\n * Basic example of how you can provide extra configuration options:\n * ```ts\n * const appRoutes: Routes = [];\n * bootstrapApplication(AppComponent,\n *   {\n *     providers: [\n *       provideRouter(appRoutes, withRouterConfig({\n *          onSameUrlNavigation: 'reload'\n *       }))\n *     ]\n *   }\n * );\n * ```\n *\n * @see {@link provideRouter}\n *\n * @param options A set of parameters to configure Router, see `RouterConfigOptions` for\n *     additional information.\n * @returns A set of providers for use with `provideRouter`.\n *\n * @publicApi\n */\nfunction withRouterConfig(options) {\n  const providers = [{\n    provide: ROUTER_CONFIGURATION,\n    useValue: options\n  }];\n  return routerFeature(5 /* RouterFeatureKind.RouterConfigurationFeature */, providers);\n}\n/**\n * Provides the location strategy that uses the URL fragment instead of the history API.\n *\n * @usageNotes\n *\n * Basic example of how you can use the hash location option:\n * ```ts\n * const appRoutes: Routes = [];\n * bootstrapApplication(AppComponent,\n *   {\n *     providers: [\n *       provideRouter(appRoutes, withHashLocation())\n *     ]\n *   }\n * );\n * ```\n *\n * @see {@link provideRouter}\n * @see {@link /api/common/HashLocationStrategy HashLocationStrategy}\n *\n * @returns A set of providers for use with `provideRouter`.\n *\n * @publicApi\n */\nfunction withHashLocation() {\n  const providers = [{\n    provide: LocationStrategy,\n    useClass: HashLocationStrategy\n  }];\n  return routerFeature(6 /* RouterFeatureKind.RouterHashLocationFeature */, providers);\n}\n/**\n * Provides a function which is called when a navigation error occurs.\n *\n * This function is run inside application's [injection context](guide/di/dependency-injection-context)\n * so you can use the [`inject`](api/core/inject) function.\n *\n * This function can return a `RedirectCommand` to convert the error to a redirect, similar to returning\n * a `UrlTree` or `RedirectCommand` from a guard. This will also prevent the `Router` from emitting\n * `NavigationError`; it will instead emit `NavigationCancel` with code NavigationCancellationCode.Redirect.\n * Return values other than `RedirectCommand` are ignored and do not change any behavior with respect to\n * how the `Router` handles the error.\n *\n * @usageNotes\n *\n * Basic example of how you can use the error handler option:\n * ```ts\n * const appRoutes: Routes = [];\n * bootstrapApplication(AppComponent,\n *   {\n *     providers: [\n *       provideRouter(appRoutes, withNavigationErrorHandler((e: NavigationError) =>\n * inject(MyErrorTracker).trackError(e)))\n *     ]\n *   }\n * );\n * ```\n *\n * @see {@link NavigationError}\n * @see {@link /api/core/inject inject}\n * @see {@link runInInjectionContext}\n *\n * @returns A set of providers for use with `provideRouter`.\n *\n * @publicApi\n */\nfunction withNavigationErrorHandler(handler) {\n  const providers = [{\n    provide: NAVIGATION_ERROR_HANDLER,\n    useValue: handler\n  }];\n  return routerFeature(7 /* RouterFeatureKind.NavigationErrorHandlerFeature */, providers);\n}\n/**\n * Enables binding information from the `Router` state directly to the inputs of the component in\n * `Route` configurations.\n *\n * @usageNotes\n *\n * Basic example of how you can enable the feature:\n * ```ts\n * const appRoutes: Routes = [];\n * bootstrapApplication(AppComponent,\n *   {\n *     providers: [\n *       provideRouter(appRoutes, withComponentInputBinding())\n *     ]\n *   }\n * );\n * ```\n *\n * The router bindings information from any of the following sources:\n *\n *  - query parameters\n *  - path and matrix parameters\n *  - static route data\n *  - data from resolvers\n *\n * Duplicate keys are resolved in the same order from above, from least to greatest,\n * meaning that resolvers have the highest precedence and override any of the other information\n * from the route.\n *\n * Importantly, when an input does not have an item in the route data with a matching key, this\n * input is set to `undefined`. This prevents previous information from being\n * retained if the data got removed from the route (i.e. if a query parameter is removed).\n * Default values can be provided with a resolver on the route to ensure the value is always present\n * or an input and use an input transform in the component.\n *\n * @see {@link /guide/components/inputs#input-transforms Input Transforms}\n * @returns A set of providers for use with `provideRouter`.\n */\nfunction withComponentInputBinding() {\n  const providers = [RoutedComponentInputBinder, {\n    provide: INPUT_BINDER,\n    useExisting: RoutedComponentInputBinder\n  }];\n  return routerFeature(8 /* RouterFeatureKind.ComponentInputBindingFeature */, providers);\n}\n/**\n * Enables view transitions in the Router by running the route activation and deactivation inside of\n * `document.startViewTransition`.\n *\n * Note: The View Transitions API is not available in all browsers. If the browser does not support\n * view transitions, the Router will not attempt to start a view transition and continue processing\n * the navigation as usual.\n *\n * @usageNotes\n *\n * Basic example of how you can enable the feature:\n * ```ts\n * const appRoutes: Routes = [];\n * bootstrapApplication(AppComponent,\n *   {\n *     providers: [\n *       provideRouter(appRoutes, withViewTransitions())\n *     ]\n *   }\n * );\n * ```\n *\n * @returns A set of providers for use with `provideRouter`.\n * @see https://developer.chrome.com/docs/web-platform/view-transitions/\n * @see https://developer.mozilla.org/en-US/docs/Web/API/View_Transitions_API\n * @developerPreview\n */\nfunction withViewTransitions(options) {\n  const providers = [{\n    provide: CREATE_VIEW_TRANSITION,\n    useValue: createViewTransition\n  }, {\n    provide: VIEW_TRANSITION_OPTIONS,\n    useValue: {\n      skipNextTransition: !!options?.skipInitialTransition,\n      ...options\n    }\n  }];\n  return routerFeature(9 /* RouterFeatureKind.ViewTransitionsFeature */, providers);\n}\n\n/**\n * The directives defined in the `RouterModule`.\n */\nconst ROUTER_DIRECTIVES = [RouterOutlet, RouterLink, RouterLinkActive, _EmptyOutletComponent];\n/**\n * @docsNotRequired\n */\nconst ROUTER_FORROOT_GUARD = new InjectionToken(typeof ngDevMode === 'undefined' || ngDevMode ? 'router duplicate forRoot guard' : '');\n// TODO(atscott): All of these except `ActivatedRoute` are `providedIn: 'root'`. They are only kept\n// here to avoid a breaking change whereby the provider order matters based on where the\n// `RouterModule`/`RouterTestingModule` is imported. These can/should be removed as a \"breaking\"\n// change in a major version.\nconst ROUTER_PROVIDERS = [Location, {\n  provide: UrlSerializer,\n  useClass: DefaultUrlSerializer\n}, Router, ChildrenOutletContexts, {\n  provide: ActivatedRoute,\n  useFactory: rootRoute,\n  deps: [Router]\n}, RouterConfigLoader,\n// Only used to warn when `provideRoutes` is used without `RouterModule` or `provideRouter`. Can\n// be removed when `provideRoutes` is removed.\ntypeof ngDevMode === 'undefined' || ngDevMode ? {\n  provide: ROUTER_IS_PROVIDED,\n  useValue: true\n} : []];\n/**\n * @description\n *\n * Adds directives and providers for in-app navigation among views defined in an application.\n * Use the Angular `Router` service to declaratively specify application states and manage state\n * transitions.\n *\n * You can import this NgModule multiple times, once for each lazy-loaded bundle.\n * However, only one `Router` service can be active.\n * To ensure this, there are two ways to register routes when importing this module:\n *\n * * The `forRoot()` method creates an `NgModule` that contains all the directives, the given\n * routes, and the `Router` service itself.\n * * The `forChild()` method creates an `NgModule` that contains all the directives and the given\n * routes, but does not include the `Router` service.\n *\n * @see [Routing and Navigation guide](guide/routing/common-router-tasks) for an\n * overview of how the `Router` service should be used.\n *\n * @publicApi\n */\nclass RouterModule {\n  constructor() {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      inject(ROUTER_FORROOT_GUARD, {\n        optional: true\n      });\n    }\n  }\n  /**\n   * Creates and configures a module with all the router providers and directives.\n   * Optionally sets up an application listener to perform an initial navigation.\n   *\n   * When registering the NgModule at the root, import as follows:\n   *\n   * ```ts\n   * @NgModule({\n   *   imports: [RouterModule.forRoot(ROUTES)]\n   * })\n   * class MyNgModule {}\n   * ```\n   *\n   * @param routes An array of `Route` objects that define the navigation paths for the application.\n   * @param config An `ExtraOptions` configuration object that controls how navigation is performed.\n   * @return The new `NgModule`.\n   *\n   */\n  static forRoot(routes, config) {\n    return {\n      ngModule: RouterModule,\n      providers: [ROUTER_PROVIDERS, typeof ngDevMode === 'undefined' || ngDevMode ? config?.enableTracing ? withDebugTracing().ɵproviders : [] : [], {\n        provide: ROUTES,\n        multi: true,\n        useValue: routes\n      }, typeof ngDevMode === 'undefined' || ngDevMode ? {\n        provide: ROUTER_FORROOT_GUARD,\n        useFactory: provideForRootGuard,\n        deps: [[Router, new Optional(), new SkipSelf()]]\n      } : [], config?.errorHandler ? {\n        provide: NAVIGATION_ERROR_HANDLER,\n        useValue: config.errorHandler\n      } : [], {\n        provide: ROUTER_CONFIGURATION,\n        useValue: config ? config : {}\n      }, config?.useHash ? provideHashLocationStrategy() : providePathLocationStrategy(), provideRouterScroller(), config?.preloadingStrategy ? withPreloading(config.preloadingStrategy).ɵproviders : [], config?.initialNavigation ? provideInitialNavigation(config) : [], config?.bindToComponentInputs ? withComponentInputBinding().ɵproviders : [], config?.enableViewTransitions ? withViewTransitions().ɵproviders : [], provideRouterInitializer()]\n    };\n  }\n  /**\n   * Creates a module with all the router directives and a provider registering routes,\n   * without creating a new Router service.\n   * When registering for submodules and lazy-loaded submodules, create the NgModule as follows:\n   *\n   * ```ts\n   * @NgModule({\n   *   imports: [RouterModule.forChild(ROUTES)]\n   * })\n   * class MyNgModule {}\n   * ```\n   *\n   * @param routes An array of `Route` objects that define the navigation paths for the submodule.\n   * @return The new NgModule.\n   *\n   */\n  static forChild(routes) {\n    return {\n      ngModule: RouterModule,\n      providers: [{\n        provide: ROUTES,\n        multi: true,\n        useValue: routes\n      }]\n    };\n  }\n  static ɵfac = function RouterModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || RouterModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: RouterModule,\n    imports: [RouterOutlet, RouterLink, RouterLinkActive, _EmptyOutletComponent],\n    exports: [RouterOutlet, RouterLink, RouterLinkActive, _EmptyOutletComponent]\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RouterModule, [{\n    type: NgModule,\n    args: [{\n      imports: ROUTER_DIRECTIVES,\n      exports: ROUTER_DIRECTIVES\n    }]\n  }], () => [], null);\n})();\n/**\n * For internal use by `RouterModule` only. Note that this differs from `withInMemoryRouterScroller`\n * because it reads from the `ExtraOptions` which should not be used in the standalone world.\n */\nfunction provideRouterScroller() {\n  return {\n    provide: ROUTER_SCROLLER,\n    useFactory: () => {\n      const viewportScroller = inject(ViewportScroller);\n      const zone = inject(NgZone);\n      const config = inject(ROUTER_CONFIGURATION);\n      const transitions = inject(NavigationTransitions);\n      const urlSerializer = inject(UrlSerializer);\n      if (config.scrollOffset) {\n        viewportScroller.setOffset(config.scrollOffset);\n      }\n      return new RouterScroller(urlSerializer, transitions, viewportScroller, zone, config);\n    }\n  };\n}\n// Note: For internal use only with `RouterModule`. Standalone setup via `provideRouter` should\n// provide hash location directly via `{provide: LocationStrategy, useClass: HashLocationStrategy}`.\nfunction provideHashLocationStrategy() {\n  return {\n    provide: LocationStrategy,\n    useClass: HashLocationStrategy\n  };\n}\n// Note: For internal use only with `RouterModule`. Standalone setup via `provideRouter` does not\n// need this at all because `PathLocationStrategy` is the default factory for `LocationStrategy`.\nfunction providePathLocationStrategy() {\n  return {\n    provide: LocationStrategy,\n    useClass: PathLocationStrategy\n  };\n}\nfunction provideForRootGuard(router) {\n  if (router) {\n    throw new _RuntimeError(4007 /* RuntimeErrorCode.FOR_ROOT_CALLED_TWICE */, `The Router was provided more than once. This can happen if 'forRoot' is used outside of the root injector.` + ` Lazy loaded modules should use RouterModule.forChild() instead.`);\n  }\n  return 'guarded';\n}\n// Note: For internal use only with `RouterModule`. Standalone router setup with `provideRouter`\n// users call `withXInitialNavigation` directly.\nfunction provideInitialNavigation(config) {\n  return [config.initialNavigation === 'disabled' ? withDisabledInitialNavigation().ɵproviders : [], config.initialNavigation === 'enabledBlocking' ? withEnabledBlockingInitialNavigation().ɵproviders : []];\n}\n// TODO(atscott): This should not be in the public API\n/**\n * A DI token for the router initializer that\n * is called after the app is bootstrapped.\n *\n * @publicApi\n */\nconst ROUTER_INITIALIZER = new InjectionToken(typeof ngDevMode === 'undefined' || ngDevMode ? 'Router Initializer' : '');\nfunction provideRouterInitializer() {\n  return [\n  // ROUTER_INITIALIZER token should be removed. It's public API but shouldn't be. We can just\n  // have `getBootstrapListener` directly attached to APP_BOOTSTRAP_LISTENER.\n  {\n    provide: ROUTER_INITIALIZER,\n    useFactory: getBootstrapListener\n  }, {\n    provide: APP_BOOTSTRAP_LISTENER,\n    multi: true,\n    useExisting: ROUTER_INITIALIZER\n  }];\n}\nexport { NoPreloading as N, PreloadAllModules as P, RouterLink as R, RouterLinkActive as a, provideRoutes as b, withComponentInputBinding as c, withDebugTracing as d, withDisabledInitialNavigation as e, withEnabledBlockingInitialNavigation as f, withHashLocation as g, withInMemoryScrolling as h, withNavigationErrorHandler as i, withPreloading as j, withRouterConfig as k, ROUTER_INITIALIZER as l, RouterModule as m, PreloadingStrategy as n, RouterPreloader as o, provideRouter as p, ROUTER_PROVIDERS as q, withViewTransitions as w };","map":{"version":3,"names":["i3","HashLocationStrategy","LocationStrategy","ViewportScroller","LOCATION_INITIALIZED","Location","PathLocationStrategy","i0","ɵRuntimeError","_RuntimeError","ɵɵsanitizeUrlOrResourceUrl","__sanitizeUrlOrResourceUrl","booleanAttribute","HostListener","Input","HostBinding","Attribute","Directive","EventEmitter","Output","ContentChildren","Optional","createEnvironmentInjector","Injectable","InjectionToken","makeEnvironmentProviders","APP_BOOTSTRAP_LISTENER","ENVIRONMENT_INITIALIZER","inject","Injector","ApplicationRef","InjectFlags","APP_INITIALIZER","NgZone","SkipSelf","NgModule","g","NavigationEnd","X","isUrlTree","t","Router","x","ActivatedRoute","Y","RouterConfigLoader","k","NavigationStart","i","NavigationSkipped","j","NavigationSkippedCode","S","Scroll","M","UrlSerializer","Z","NavigationTransitions","v","ROUTES","u","ROUTER_CONFIGURATION","_","NAVIGATION_ERROR_HANDLER","$","RoutedComponentInputBinder","a0","INPUT_BINDER","a1","createViewTransition","a2","CREATE_VIEW_TRANSITION","a3","VIEW_TRANSITION_OPTIONS","W","afterNextNavigation","a4","stringifyEvent","J","DefaultUrlSerializer","w","ChildrenOutletContexts","R","RouterOutlet","ɵ","_EmptyOutletComponent","Subject","of","from","mergeAll","catchError","filter","concatMap","mergeMap","RouterLink","router","route","tabIndexAttribute","renderer","el","locationStrategy","href","target","queryParams","fragment","queryParamsHandling","state","info","relativeTo","isAnchorElement","subscription","onChanges","constructor","tagName","nativeElement","toLowerCase","events","subscribe","s","updateHref","setTabIndexIfNotOnNativeEl","preserveFragment","skipLocationChange","replaceUrl","newTabIndex","applyAttributeValue","ngOnChanges","changes","ngDevMode","routerLinkInput","undefined","next","routerLink","commandsOrUrlTree","Array","isArray","onClick","button","ctrlKey","shiftKey","altKey","metaKey","urlTree","extras","navigateByUrl","ngOnDestroy","unsubscribe","prepareExternalUrl","serializeUrl","sanitizedValue","attrName","attrValue","setAttribute","removeAttribute","createUrlTree","ɵfac","RouterLink_Factory","__ngFactoryType__","ɵɵdirectiveInject","ɵɵinjectAttribute","Renderer2","ElementRef","ɵdir","ɵɵdefineDirective","type","selectors","hostVars","hostBindings","RouterLink_HostBindings","rf","ctx","ɵɵlistener","RouterLink_click_HostBindingHandler","$event","ɵɵattribute","inputs","features","ɵɵNgOnChangesFeature","ɵsetClassMetadata","args","selector","decorators","transform","RouterLinkActive","element","cdr","link","links","classes","routerEventsSubscription","linkInputChangesSubscription","_isActive","isActive","routerLinkActiveOptions","exact","ariaCurrentWhenActive","isActiveChange","update","ngAfterContentInit","pipe","subscribeToEachLinkOnChanges","allLinkChanges","toArray","map","isLinkActive","routerLinkActive","data","split","c","navigated","queueMicrotask","hasActiveLinks","forEach","addClass","removeClass","toString","markForCheck","emit","options","isActiveMatchOptions","isActiveCheckFn","some","RouterLinkActive_Factory","ChangeDetectorRef","contentQueries","RouterLinkActive_ContentQueries","dirIndex","ɵɵcontentQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","outputs","exportAs","descendants","paths","PreloadingStrategy","PreloadAllModules","preload","fn","PreloadAllModules_Factory","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","NoPreloading","NoPreloading_Factory","RouterPreloader","injector","preloadingStrategy","loader","compiler","setUpPreloading","e","processRoutes","config","routes","res","providers","_injector","path","injectorForCurrentRoute","injectorForChildren","_loadedInjector","loadChildren","_loadedRoutes","canLoad","loadComponent","_loadedComponent","push","preloadConfig","children","loadedChildren$","recursiveLoadChildren$","loadComponent$","RouterPreloader_Factory","ɵɵinject","Compiler","EnvironmentInjector","ROUTER_SCROLLER","RouterScroller","urlSerializer","transitions","viewportScroller","zone","scrollEventsSubscription","lastId","lastSource","restoredId","store","scrollPositionRestoration","anchorScrolling","init","setHistoryScrollRestoration","createScrollEvents","consumeScrollEvents","getScrollPosition","navigationTrigger","restoredState","navigationId","id","scheduleScrollEvent","parse","urlAfterRedirects","code","IgnoredSameUrlNavigation","url","position","scrollToPosition","anchor","scrollToAnchor","routerEvent","runOutsideAngular","setTimeout","run","RouterScroller_Factory","ɵɵinvalidFactory","provideRouter","provide","multi","useValue","ROUTER_IS_PROVIDED","useFactory","rootRoute","deps","getBootstrapListener","feature","ɵproviders","routerState","root","routerFeature","kind","ɵkind","routerIsProvidedDevModeCheck","console","warn","provideRoutes","withInMemoryScrolling","bootstrappedComponentRef","ref","get","components","bootstrapDone","BOOTSTRAP_DONE","INITIAL_NAVIGATION","initialNavigation","ROUTER_PRELOADER","resetRootComponentType","componentTypes","closed","complete","withEnabledBlockingInitialNavigation","locationInitialized","Promise","resolve","then","afterPreactivation","withDisabledInitialNavigation","setUpLocationChangeListener","withDebugTracing","group","name","log","groupEnd","withPreloading","useExisting","withRouterConfig","withHashLocation","useClass","withNavigationErrorHandler","handler","withComponentInputBinding","withViewTransitions","skipNextTransition","skipInitialTransition","ROUTER_DIRECTIVES","ROUTER_FORROOT_GUARD","ROUTER_PROVIDERS","RouterModule","optional","forRoot","ngModule","enableTracing","provideForRootGuard","errorHandler","useHash","provideHashLocationStrategy","providePathLocationStrategy","provideRouterScroller","provideInitialNavigation","bindToComponentInputs","enableViewTransitions","provideRouterInitializer","forChild","RouterModule_Factory","ɵmod","ɵɵdefineNgModule","imports","exports","ɵinj","ɵɵdefineInjector","scrollOffset","setOffset","ROUTER_INITIALIZER","N","P","a","b","d","f","h","l","m","n","o","p","q"],"sources":["C:/Users/user/Desktop/angular-devops/node_modules/@angular/router/fesm2022/router_module-C0FJ-J6L.mjs"],"sourcesContent":["/**\n * @license Angular v19.2.5\n * (c) 2010-2025 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport * as i3 from '@angular/common';\nimport { HashLocationStrategy, LocationStrategy, ViewportScroller, LOCATION_INITIALIZED, Location, PathLocationStrategy } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { ɵRuntimeError as _RuntimeError, ɵɵsanitizeUrlOrResourceUrl as __sanitizeUrlOrResourceUrl, booleanAttribute, HostListener, Input, HostBinding, Attribute, Directive, EventEmitter, Output, ContentChildren, Optional, createEnvironmentInjector, Injectable, InjectionToken, makeEnvironmentProviders, APP_BOOTSTRAP_LISTENER, ENVIRONMENT_INITIALIZER, inject, Injector, ApplicationRef, InjectFlags, APP_INITIALIZER, NgZone, SkipSelf, NgModule } from '@angular/core';\nimport { g as NavigationEnd, X as isUrlTree, t as Router, x as ActivatedRoute, Y as RouterConfigLoader, k as NavigationStart, i as NavigationSkipped, j as NavigationSkippedCode, S as Scroll, M as UrlSerializer, Z as NavigationTransitions, v as ROUTES, u as ROUTER_CONFIGURATION, _ as NAVIGATION_ERROR_HANDLER, $ as RoutedComponentInputBinder, a0 as INPUT_BINDER, a1 as createViewTransition, a2 as CREATE_VIEW_TRANSITION, a3 as VIEW_TRANSITION_OPTIONS, W as afterNextNavigation, a4 as stringifyEvent, J as DefaultUrlSerializer, w as ChildrenOutletContexts, R as RouterOutlet, ɵ as _EmptyOutletComponent } from './router-LSBBtrLI.mjs';\nimport { Subject, of, from } from 'rxjs';\nimport { mergeAll, catchError, filter, concatMap, mergeMap } from 'rxjs/operators';\n\n/**\n * @description\n *\n * When applied to an element in a template, makes that element a link\n * that initiates navigation to a route. Navigation opens one or more routed components\n * in one or more `<router-outlet>` locations on the page.\n *\n * Given a route configuration `[{ path: 'user/:name', component: UserCmp }]`,\n * the following creates a static link to the route:\n * `<a routerLink=\"/user/bob\">link to user component</a>`\n *\n * You can use dynamic values to generate the link.\n * For a dynamic link, pass an array of path segments,\n * followed by the params for each segment.\n * For example, `['/team', teamId, 'user', userName, {details: true}]`\n * generates a link to `/team/11/user/bob;details=true`.\n *\n * Multiple static segments can be merged into one term and combined with dynamic segments.\n * For example, `['/team/11/user', userName, {details: true}]`\n *\n * The input that you provide to the link is treated as a delta to the current URL.\n * For instance, suppose the current URL is `/user/(box//aux:team)`.\n * The link `<a [routerLink]=\"['/user/jim']\">Jim</a>` creates the URL\n * `/user/(jim//aux:team)`.\n * See {@link Router#createUrlTree} for more information.\n *\n * @usageNotes\n *\n * You can use absolute or relative paths in a link, set query parameters,\n * control how parameters are handled, and keep a history of navigation states.\n *\n * ### Relative link paths\n *\n * The first segment name can be prepended with `/`, `./`, or `../`.\n * * If the first segment begins with `/`, the router looks up the route from the root of the\n *   app.\n * * If the first segment begins with `./`, or doesn't begin with a slash, the router\n *   looks in the children of the current activated route.\n * * If the first segment begins with `../`, the router goes up one level in the route tree.\n *\n * ### Setting and handling query params and fragments\n *\n * The following link adds a query parameter and a fragment to the generated URL:\n *\n * ```html\n * <a [routerLink]=\"['/user/bob']\" [queryParams]=\"{debug: true}\" fragment=\"education\">\n *   link to user component\n * </a>\n * ```\n * By default, the directive constructs the new URL using the given query parameters.\n * The example generates the link: `/user/bob?debug=true#education`.\n *\n * You can instruct the directive to handle query parameters differently\n * by specifying the `queryParamsHandling` option in the link.\n * Allowed values are:\n *\n *  - `'merge'`: Merge the given `queryParams` into the current query params.\n *  - `'preserve'`: Preserve the current query params.\n *\n * For example:\n *\n * ```html\n * <a [routerLink]=\"['/user/bob']\" [queryParams]=\"{debug: true}\" queryParamsHandling=\"merge\">\n *   link to user component\n * </a>\n * ```\n *\n * `queryParams`, `fragment`, `queryParamsHandling`, `preserveFragment`, and `relativeTo`\n * cannot be used when the `routerLink` input is a `UrlTree`.\n *\n * See {@link UrlCreationOptions#queryParamsHandling}.\n *\n * ### Preserving navigation history\n *\n * You can provide a `state` value to be persisted to the browser's\n * [`History.state` property](https://developer.mozilla.org/en-US/docs/Web/API/History#Properties).\n * For example:\n *\n * ```html\n * <a [routerLink]=\"['/user/bob']\" [state]=\"{tracingId: 123}\">\n *   link to user component\n * </a>\n * ```\n *\n * Use {@link Router#getCurrentNavigation} to retrieve a saved\n * navigation-state value. For example, to capture the `tracingId` during the `NavigationStart`\n * event:\n *\n * ```ts\n * // Get NavigationStart events\n * router.events.pipe(filter(e => e instanceof NavigationStart)).subscribe(e => {\n *   const navigation = router.getCurrentNavigation();\n *   tracingService.trace({id: navigation.extras.state.tracingId});\n * });\n * ```\n *\n * @ngModule RouterModule\n *\n * @publicApi\n */\nclass RouterLink {\n    router;\n    route;\n    tabIndexAttribute;\n    renderer;\n    el;\n    locationStrategy;\n    /**\n     * Represents an `href` attribute value applied to a host element,\n     * when a host element is `<a>`. For other tags, the value is `null`.\n     */\n    href = null;\n    /**\n     * Represents the `target` attribute on a host element.\n     * This is only used when the host element is an `<a>` tag.\n     */\n    target;\n    /**\n     * Passed to {@link Router#createUrlTree} as part of the\n     * `UrlCreationOptions`.\n     * @see {@link UrlCreationOptions#queryParams}\n     * @see {@link Router#createUrlTree}\n     */\n    queryParams;\n    /**\n     * Passed to {@link Router#createUrlTree} as part of the\n     * `UrlCreationOptions`.\n     * @see {@link UrlCreationOptions#fragment}\n     * @see {@link Router#createUrlTree}\n     */\n    fragment;\n    /**\n     * Passed to {@link Router#createUrlTree} as part of the\n     * `UrlCreationOptions`.\n     * @see {@link UrlCreationOptions#queryParamsHandling}\n     * @see {@link Router#createUrlTree}\n     */\n    queryParamsHandling;\n    /**\n     * Passed to {@link Router#navigateByUrl} as part of the\n     * `NavigationBehaviorOptions`.\n     * @see {@link NavigationBehaviorOptions#state}\n     * @see {@link Router#navigateByUrl}\n     */\n    state;\n    /**\n     * Passed to {@link Router#navigateByUrl} as part of the\n     * `NavigationBehaviorOptions`.\n     * @see {@link NavigationBehaviorOptions#info}\n     * @see {@link Router#navigateByUrl}\n     */\n    info;\n    /**\n     * Passed to {@link Router#createUrlTree} as part of the\n     * `UrlCreationOptions`.\n     * Specify a value here when you do not want to use the default value\n     * for `routerLink`, which is the current activated route.\n     * Note that a value of `undefined` here will use the `routerLink` default.\n     * @see {@link UrlCreationOptions#relativeTo}\n     * @see {@link Router#createUrlTree}\n     */\n    relativeTo;\n    /** Whether a host element is an `<a>` tag. */\n    isAnchorElement;\n    subscription;\n    /** @internal */\n    onChanges = new Subject();\n    constructor(router, route, tabIndexAttribute, renderer, el, locationStrategy) {\n        this.router = router;\n        this.route = route;\n        this.tabIndexAttribute = tabIndexAttribute;\n        this.renderer = renderer;\n        this.el = el;\n        this.locationStrategy = locationStrategy;\n        const tagName = el.nativeElement.tagName?.toLowerCase();\n        this.isAnchorElement = tagName === 'a' || tagName === 'area';\n        if (this.isAnchorElement) {\n            this.subscription = router.events.subscribe((s) => {\n                if (s instanceof NavigationEnd) {\n                    this.updateHref();\n                }\n            });\n        }\n        else {\n            this.setTabIndexIfNotOnNativeEl('0');\n        }\n    }\n    /**\n     * Passed to {@link Router#createUrlTree} as part of the\n     * `UrlCreationOptions`.\n     * @see {@link UrlCreationOptions#preserveFragment}\n     * @see {@link Router#createUrlTree}\n     */\n    preserveFragment = false;\n    /**\n     * Passed to {@link Router#navigateByUrl} as part of the\n     * `NavigationBehaviorOptions`.\n     * @see {@link NavigationBehaviorOptions#skipLocationChange}\n     * @see {@link Router#navigateByUrl}\n     */\n    skipLocationChange = false;\n    /**\n     * Passed to {@link Router#navigateByUrl} as part of the\n     * `NavigationBehaviorOptions`.\n     * @see {@link NavigationBehaviorOptions#replaceUrl}\n     * @see {@link Router#navigateByUrl}\n     */\n    replaceUrl = false;\n    /**\n     * Modifies the tab index if there was not a tabindex attribute on the element during\n     * instantiation.\n     */\n    setTabIndexIfNotOnNativeEl(newTabIndex) {\n        if (this.tabIndexAttribute != null /* both `null` and `undefined` */ || this.isAnchorElement) {\n            return;\n        }\n        this.applyAttributeValue('tabindex', newTabIndex);\n    }\n    /** @nodoc */\n    // TODO(atscott): Remove changes parameter in major version as a breaking change.\n    ngOnChanges(changes) {\n        if (ngDevMode &&\n            isUrlTree(this.routerLinkInput) &&\n            (this.fragment !== undefined ||\n                this.queryParams ||\n                this.queryParamsHandling ||\n                this.preserveFragment ||\n                this.relativeTo)) {\n            throw new _RuntimeError(4016 /* RuntimeErrorCode.INVALID_ROUTER_LINK_INPUTS */, 'Cannot configure queryParams or fragment when using a UrlTree as the routerLink input value.');\n        }\n        if (this.isAnchorElement) {\n            this.updateHref();\n        }\n        // This is subscribed to by `RouterLinkActive` so that it knows to update when there are changes\n        // to the RouterLinks it's tracking.\n        this.onChanges.next(this);\n    }\n    routerLinkInput = null;\n    /**\n     * Commands to pass to {@link Router#createUrlTree} or a `UrlTree`.\n     *   - **array**: commands to pass to {@link Router#createUrlTree}.\n     *   - **string**: shorthand for array of commands with just the string, i.e. `['/route']`\n     *   - **UrlTree**: a `UrlTree` for this link rather than creating one from the commands\n     *     and other inputs that correspond to properties of `UrlCreationOptions`.\n     *   - **null|undefined**: effectively disables the `routerLink`\n     * @see {@link Router#createUrlTree}\n     */\n    set routerLink(commandsOrUrlTree) {\n        if (commandsOrUrlTree == null) {\n            this.routerLinkInput = null;\n            this.setTabIndexIfNotOnNativeEl(null);\n        }\n        else {\n            if (isUrlTree(commandsOrUrlTree)) {\n                this.routerLinkInput = commandsOrUrlTree;\n            }\n            else {\n                this.routerLinkInput = Array.isArray(commandsOrUrlTree)\n                    ? commandsOrUrlTree\n                    : [commandsOrUrlTree];\n            }\n            this.setTabIndexIfNotOnNativeEl('0');\n        }\n    }\n    /** @nodoc */\n    onClick(button, ctrlKey, shiftKey, altKey, metaKey) {\n        const urlTree = this.urlTree;\n        if (urlTree === null) {\n            return true;\n        }\n        if (this.isAnchorElement) {\n            if (button !== 0 || ctrlKey || shiftKey || altKey || metaKey) {\n                return true;\n            }\n            if (typeof this.target === 'string' && this.target != '_self') {\n                return true;\n            }\n        }\n        const extras = {\n            skipLocationChange: this.skipLocationChange,\n            replaceUrl: this.replaceUrl,\n            state: this.state,\n            info: this.info,\n        };\n        this.router.navigateByUrl(urlTree, extras);\n        // Return `false` for `<a>` elements to prevent default action\n        // and cancel the native behavior, since the navigation is handled\n        // by the Router.\n        return !this.isAnchorElement;\n    }\n    /** @nodoc */\n    ngOnDestroy() {\n        this.subscription?.unsubscribe();\n    }\n    updateHref() {\n        const urlTree = this.urlTree;\n        this.href =\n            urlTree !== null && this.locationStrategy\n                ? this.locationStrategy?.prepareExternalUrl(this.router.serializeUrl(urlTree))\n                : null;\n        const sanitizedValue = this.href === null\n            ? null\n            : // This class represents a directive that can be added to both `<a>` elements,\n                // as well as other elements. As a result, we can't define security context at\n                // compile time. So the security context is deferred to runtime.\n                // The `ɵɵsanitizeUrlOrResourceUrl` selects the necessary sanitizer function\n                // based on the tag and property names. The logic mimics the one from\n                // `packages/compiler/src/schema/dom_security_schema.ts`, which is used at compile time.\n                //\n                // Note: we should investigate whether we can switch to using `@HostBinding('attr.href')`\n                // instead of applying a value via a renderer, after a final merge of the\n                // `RouterLinkWithHref` directive.\n                __sanitizeUrlOrResourceUrl(this.href, this.el.nativeElement.tagName.toLowerCase(), 'href');\n        this.applyAttributeValue('href', sanitizedValue);\n    }\n    applyAttributeValue(attrName, attrValue) {\n        const renderer = this.renderer;\n        const nativeElement = this.el.nativeElement;\n        if (attrValue !== null) {\n            renderer.setAttribute(nativeElement, attrName, attrValue);\n        }\n        else {\n            renderer.removeAttribute(nativeElement, attrName);\n        }\n    }\n    get urlTree() {\n        if (this.routerLinkInput === null) {\n            return null;\n        }\n        else if (isUrlTree(this.routerLinkInput)) {\n            return this.routerLinkInput;\n        }\n        return this.router.createUrlTree(this.routerLinkInput, {\n            // If the `relativeTo` input is not defined, we want to use `this.route` by default.\n            // Otherwise, we should use the value provided by the user in the input.\n            relativeTo: this.relativeTo !== undefined ? this.relativeTo : this.route,\n            queryParams: this.queryParams,\n            fragment: this.fragment,\n            queryParamsHandling: this.queryParamsHandling,\n            preserveFragment: this.preserveFragment,\n        });\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.5\", ngImport: i0, type: RouterLink, deps: [{ token: Router }, { token: ActivatedRoute }, { token: 'tabindex', attribute: true }, { token: i0.Renderer2 }, { token: i0.ElementRef }, { token: i3.LocationStrategy }], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"19.2.5\", type: RouterLink, isStandalone: true, selector: \"[routerLink]\", inputs: { target: \"target\", queryParams: \"queryParams\", fragment: \"fragment\", queryParamsHandling: \"queryParamsHandling\", state: \"state\", info: \"info\", relativeTo: \"relativeTo\", preserveFragment: [\"preserveFragment\", \"preserveFragment\", booleanAttribute], skipLocationChange: [\"skipLocationChange\", \"skipLocationChange\", booleanAttribute], replaceUrl: [\"replaceUrl\", \"replaceUrl\", booleanAttribute], routerLink: \"routerLink\" }, host: { listeners: { \"click\": \"onClick($event.button,$event.ctrlKey,$event.shiftKey,$event.altKey,$event.metaKey)\" }, properties: { \"attr.target\": \"this.target\" } }, usesOnChanges: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.5\", ngImport: i0, type: RouterLink, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[routerLink]',\n                }]\n        }], ctorParameters: () => [{ type: Router }, { type: ActivatedRoute }, { type: undefined, decorators: [{\n                    type: Attribute,\n                    args: ['tabindex']\n                }] }, { type: i0.Renderer2 }, { type: i0.ElementRef }, { type: i3.LocationStrategy }], propDecorators: { target: [{\n                type: HostBinding,\n                args: ['attr.target']\n            }, {\n                type: Input\n            }], queryParams: [{\n                type: Input\n            }], fragment: [{\n                type: Input\n            }], queryParamsHandling: [{\n                type: Input\n            }], state: [{\n                type: Input\n            }], info: [{\n                type: Input\n            }], relativeTo: [{\n                type: Input\n            }], preserveFragment: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], skipLocationChange: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], replaceUrl: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], routerLink: [{\n                type: Input\n            }], onClick: [{\n                type: HostListener,\n                args: ['click', [\n                        '$event.button',\n                        '$event.ctrlKey',\n                        '$event.shiftKey',\n                        '$event.altKey',\n                        '$event.metaKey',\n                    ]]\n            }] } });\n\n/**\n *\n * @description\n *\n * Tracks whether the linked route of an element is currently active, and allows you\n * to specify one or more CSS classes to add to the element when the linked route\n * is active.\n *\n * Use this directive to create a visual distinction for elements associated with an active route.\n * For example, the following code highlights the word \"Bob\" when the router\n * activates the associated route:\n *\n * ```html\n * <a routerLink=\"/user/bob\" routerLinkActive=\"active-link\">Bob</a>\n * ```\n *\n * Whenever the URL is either '/user' or '/user/bob', the \"active-link\" class is\n * added to the anchor tag. If the URL changes, the class is removed.\n *\n * You can set more than one class using a space-separated string or an array.\n * For example:\n *\n * ```html\n * <a routerLink=\"/user/bob\" routerLinkActive=\"class1 class2\">Bob</a>\n * <a routerLink=\"/user/bob\" [routerLinkActive]=\"['class1', 'class2']\">Bob</a>\n * ```\n *\n * To add the classes only when the URL matches the link exactly, add the option `exact: true`:\n *\n * ```html\n * <a routerLink=\"/user/bob\" routerLinkActive=\"active-link\" [routerLinkActiveOptions]=\"{exact:\n * true}\">Bob</a>\n * ```\n *\n * To directly check the `isActive` status of the link, assign the `RouterLinkActive`\n * instance to a template variable.\n * For example, the following checks the status without assigning any CSS classes:\n *\n * ```html\n * <a routerLink=\"/user/bob\" routerLinkActive #rla=\"routerLinkActive\">\n *   Bob {{ rla.isActive ? '(already open)' : ''}}\n * </a>\n * ```\n *\n * You can apply the `RouterLinkActive` directive to an ancestor of linked elements.\n * For example, the following sets the active-link class on the `<div>`  parent tag\n * when the URL is either '/user/jim' or '/user/bob'.\n *\n * ```html\n * <div routerLinkActive=\"active-link\" [routerLinkActiveOptions]=\"{exact: true}\">\n *   <a routerLink=\"/user/jim\">Jim</a>\n *   <a routerLink=\"/user/bob\">Bob</a>\n * </div>\n * ```\n *\n * The `RouterLinkActive` directive can also be used to set the aria-current attribute\n * to provide an alternative distinction for active elements to visually impaired users.\n *\n * For example, the following code adds the 'active' class to the Home Page link when it is\n * indeed active and in such case also sets its aria-current attribute to 'page':\n *\n * ```html\n * <a routerLink=\"/\" routerLinkActive=\"active\" ariaCurrentWhenActive=\"page\">Home Page</a>\n * ```\n *\n * @ngModule RouterModule\n *\n * @publicApi\n */\nclass RouterLinkActive {\n    router;\n    element;\n    renderer;\n    cdr;\n    link;\n    links;\n    classes = [];\n    routerEventsSubscription;\n    linkInputChangesSubscription;\n    _isActive = false;\n    get isActive() {\n        return this._isActive;\n    }\n    /**\n     * Options to configure how to determine if the router link is active.\n     *\n     * These options are passed to the `Router.isActive()` function.\n     *\n     * @see {@link Router#isActive}\n     */\n    routerLinkActiveOptions = { exact: false };\n    /**\n     * Aria-current attribute to apply when the router link is active.\n     *\n     * Possible values: `'page'` | `'step'` | `'location'` | `'date'` | `'time'` | `true` | `false`.\n     *\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-current}\n     */\n    ariaCurrentWhenActive;\n    /**\n     *\n     * You can use the output `isActiveChange` to get notified each time the link becomes\n     * active or inactive.\n     *\n     * Emits:\n     * true  -> Route is active\n     * false -> Route is inactive\n     *\n     * ```html\n     * <a\n     *  routerLink=\"/user/bob\"\n     *  routerLinkActive=\"active-link\"\n     *  (isActiveChange)=\"this.onRouterLinkActive($event)\">Bob</a>\n     * ```\n     */\n    isActiveChange = new EventEmitter();\n    constructor(router, element, renderer, cdr, link) {\n        this.router = router;\n        this.element = element;\n        this.renderer = renderer;\n        this.cdr = cdr;\n        this.link = link;\n        this.routerEventsSubscription = router.events.subscribe((s) => {\n            if (s instanceof NavigationEnd) {\n                this.update();\n            }\n        });\n    }\n    /** @nodoc */\n    ngAfterContentInit() {\n        // `of(null)` is used to force subscribe body to execute once immediately (like `startWith`).\n        of(this.links.changes, of(null))\n            .pipe(mergeAll())\n            .subscribe((_) => {\n            this.update();\n            this.subscribeToEachLinkOnChanges();\n        });\n    }\n    subscribeToEachLinkOnChanges() {\n        this.linkInputChangesSubscription?.unsubscribe();\n        const allLinkChanges = [...this.links.toArray(), this.link]\n            .filter((link) => !!link)\n            .map((link) => link.onChanges);\n        this.linkInputChangesSubscription = from(allLinkChanges)\n            .pipe(mergeAll())\n            .subscribe((link) => {\n            if (this._isActive !== this.isLinkActive(this.router)(link)) {\n                this.update();\n            }\n        });\n    }\n    set routerLinkActive(data) {\n        const classes = Array.isArray(data) ? data : data.split(' ');\n        this.classes = classes.filter((c) => !!c);\n    }\n    /** @nodoc */\n    ngOnChanges(changes) {\n        this.update();\n    }\n    /** @nodoc */\n    ngOnDestroy() {\n        this.routerEventsSubscription.unsubscribe();\n        this.linkInputChangesSubscription?.unsubscribe();\n    }\n    update() {\n        if (!this.links || !this.router.navigated)\n            return;\n        queueMicrotask(() => {\n            const hasActiveLinks = this.hasActiveLinks();\n            this.classes.forEach((c) => {\n                if (hasActiveLinks) {\n                    this.renderer.addClass(this.element.nativeElement, c);\n                }\n                else {\n                    this.renderer.removeClass(this.element.nativeElement, c);\n                }\n            });\n            if (hasActiveLinks && this.ariaCurrentWhenActive !== undefined) {\n                this.renderer.setAttribute(this.element.nativeElement, 'aria-current', this.ariaCurrentWhenActive.toString());\n            }\n            else {\n                this.renderer.removeAttribute(this.element.nativeElement, 'aria-current');\n            }\n            // Only emit change if the active state changed.\n            if (this._isActive !== hasActiveLinks) {\n                this._isActive = hasActiveLinks;\n                this.cdr.markForCheck();\n                // Emit on isActiveChange after classes are updated\n                this.isActiveChange.emit(hasActiveLinks);\n            }\n        });\n    }\n    isLinkActive(router) {\n        const options = isActiveMatchOptions(this.routerLinkActiveOptions)\n            ? this.routerLinkActiveOptions\n            : // While the types should disallow `undefined` here, it's possible without strict inputs\n                this.routerLinkActiveOptions.exact || false;\n        return (link) => {\n            const urlTree = link.urlTree;\n            return urlTree ? router.isActive(urlTree, options) : false;\n        };\n    }\n    hasActiveLinks() {\n        const isActiveCheckFn = this.isLinkActive(this.router);\n        return (this.link && isActiveCheckFn(this.link)) || this.links.some(isActiveCheckFn);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.5\", ngImport: i0, type: RouterLinkActive, deps: [{ token: Router }, { token: i0.ElementRef }, { token: i0.Renderer2 }, { token: i0.ChangeDetectorRef }, { token: RouterLink, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.2.5\", type: RouterLinkActive, isStandalone: true, selector: \"[routerLinkActive]\", inputs: { routerLinkActiveOptions: \"routerLinkActiveOptions\", ariaCurrentWhenActive: \"ariaCurrentWhenActive\", routerLinkActive: \"routerLinkActive\" }, outputs: { isActiveChange: \"isActiveChange\" }, queries: [{ propertyName: \"links\", predicate: RouterLink, descendants: true }], exportAs: [\"routerLinkActive\"], usesOnChanges: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.5\", ngImport: i0, type: RouterLinkActive, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[routerLinkActive]',\n                    exportAs: 'routerLinkActive',\n                }]\n        }], ctorParameters: () => [{ type: Router }, { type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i0.ChangeDetectorRef }, { type: RouterLink, decorators: [{\n                    type: Optional\n                }] }], propDecorators: { links: [{\n                type: ContentChildren,\n                args: [RouterLink, { descendants: true }]\n            }], routerLinkActiveOptions: [{\n                type: Input\n            }], ariaCurrentWhenActive: [{\n                type: Input\n            }], isActiveChange: [{\n                type: Output\n            }], routerLinkActive: [{\n                type: Input\n            }] } });\n/**\n * Use instead of `'paths' in options` to be compatible with property renaming\n */\nfunction isActiveMatchOptions(options) {\n    return !!options.paths;\n}\n\n/**\n * @description\n *\n * Provides a preloading strategy.\n *\n * @publicApi\n */\nclass PreloadingStrategy {\n}\n/**\n * @description\n *\n * Provides a preloading strategy that preloads all modules as quickly as possible.\n *\n * ```ts\n * RouterModule.forRoot(ROUTES, {preloadingStrategy: PreloadAllModules})\n * ```\n *\n * @publicApi\n */\nclass PreloadAllModules {\n    preload(route, fn) {\n        return fn().pipe(catchError(() => of(null)));\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.5\", ngImport: i0, type: PreloadAllModules, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"19.2.5\", ngImport: i0, type: PreloadAllModules, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.5\", ngImport: i0, type: PreloadAllModules, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n/**\n * @description\n *\n * Provides a preloading strategy that does not preload any modules.\n *\n * This strategy is enabled by default.\n *\n * @publicApi\n */\nclass NoPreloading {\n    preload(route, fn) {\n        return of(null);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.5\", ngImport: i0, type: NoPreloading, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"19.2.5\", ngImport: i0, type: NoPreloading, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.5\", ngImport: i0, type: NoPreloading, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n/**\n * The preloader optimistically loads all router configurations to\n * make navigations into lazily-loaded sections of the application faster.\n *\n * The preloader runs in the background. When the router bootstraps, the preloader\n * starts listening to all navigation events. After every such event, the preloader\n * will check if any configurations can be loaded lazily.\n *\n * If a route is protected by `canLoad` guards, the preloaded will not load it.\n *\n * @publicApi\n */\nclass RouterPreloader {\n    router;\n    injector;\n    preloadingStrategy;\n    loader;\n    subscription;\n    constructor(router, compiler, injector, preloadingStrategy, loader) {\n        this.router = router;\n        this.injector = injector;\n        this.preloadingStrategy = preloadingStrategy;\n        this.loader = loader;\n    }\n    setUpPreloading() {\n        this.subscription = this.router.events\n            .pipe(filter((e) => e instanceof NavigationEnd), concatMap(() => this.preload()))\n            .subscribe(() => { });\n    }\n    preload() {\n        return this.processRoutes(this.injector, this.router.config);\n    }\n    /** @nodoc */\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n    processRoutes(injector, routes) {\n        const res = [];\n        for (const route of routes) {\n            if (route.providers && !route._injector) {\n                route._injector = createEnvironmentInjector(route.providers, injector, `Route: ${route.path}`);\n            }\n            const injectorForCurrentRoute = route._injector ?? injector;\n            const injectorForChildren = route._loadedInjector ?? injectorForCurrentRoute;\n            // Note that `canLoad` is only checked as a condition that prevents `loadChildren` and not\n            // `loadComponent`. `canLoad` guards only block loading of child routes by design. This\n            // happens as a consequence of needing to descend into children for route matching immediately\n            // while component loading is deferred until route activation. Because `canLoad` guards can\n            // have side effects, we cannot execute them here so we instead skip preloading altogether\n            // when present. Lastly, it remains to be decided whether `canLoad` should behave this way\n            // at all. Code splitting and lazy loading is separate from client-side authorization checks\n            // and should not be used as a security measure to prevent loading of code.\n            if ((route.loadChildren && !route._loadedRoutes && route.canLoad === undefined) ||\n                (route.loadComponent && !route._loadedComponent)) {\n                res.push(this.preloadConfig(injectorForCurrentRoute, route));\n            }\n            if (route.children || route._loadedRoutes) {\n                res.push(this.processRoutes(injectorForChildren, (route.children ?? route._loadedRoutes)));\n            }\n        }\n        return from(res).pipe(mergeAll());\n    }\n    preloadConfig(injector, route) {\n        return this.preloadingStrategy.preload(route, () => {\n            let loadedChildren$;\n            if (route.loadChildren && route.canLoad === undefined) {\n                loadedChildren$ = this.loader.loadChildren(injector, route);\n            }\n            else {\n                loadedChildren$ = of(null);\n            }\n            const recursiveLoadChildren$ = loadedChildren$.pipe(mergeMap((config) => {\n                if (config === null) {\n                    return of(void 0);\n                }\n                route._loadedRoutes = config.routes;\n                route._loadedInjector = config.injector;\n                // If the loaded config was a module, use that as the module/module injector going\n                // forward. Otherwise, continue using the current module/module injector.\n                return this.processRoutes(config.injector ?? injector, config.routes);\n            }));\n            if (route.loadComponent && !route._loadedComponent) {\n                const loadComponent$ = this.loader.loadComponent(route);\n                return from([recursiveLoadChildren$, loadComponent$]).pipe(mergeAll());\n            }\n            else {\n                return recursiveLoadChildren$;\n            }\n        });\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.5\", ngImport: i0, type: RouterPreloader, deps: [{ token: Router }, { token: i0.Compiler }, { token: i0.EnvironmentInjector }, { token: PreloadingStrategy }, { token: RouterConfigLoader }], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"19.2.5\", ngImport: i0, type: RouterPreloader, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.5\", ngImport: i0, type: RouterPreloader, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [{ type: Router }, { type: i0.Compiler }, { type: i0.EnvironmentInjector }, { type: PreloadingStrategy }, { type: RouterConfigLoader }] });\n\nconst ROUTER_SCROLLER = new InjectionToken('');\nclass RouterScroller {\n    urlSerializer;\n    transitions;\n    viewportScroller;\n    zone;\n    options;\n    routerEventsSubscription;\n    scrollEventsSubscription;\n    lastId = 0;\n    lastSource = 'imperative';\n    restoredId = 0;\n    store = {};\n    /** @nodoc */\n    constructor(urlSerializer, transitions, viewportScroller, zone, options = {}) {\n        this.urlSerializer = urlSerializer;\n        this.transitions = transitions;\n        this.viewportScroller = viewportScroller;\n        this.zone = zone;\n        this.options = options;\n        // Default both options to 'disabled'\n        options.scrollPositionRestoration ||= 'disabled';\n        options.anchorScrolling ||= 'disabled';\n    }\n    init() {\n        // we want to disable the automatic scrolling because having two places\n        // responsible for scrolling results race conditions, especially given\n        // that browser don't implement this behavior consistently\n        if (this.options.scrollPositionRestoration !== 'disabled') {\n            this.viewportScroller.setHistoryScrollRestoration('manual');\n        }\n        this.routerEventsSubscription = this.createScrollEvents();\n        this.scrollEventsSubscription = this.consumeScrollEvents();\n    }\n    createScrollEvents() {\n        return this.transitions.events.subscribe((e) => {\n            if (e instanceof NavigationStart) {\n                // store the scroll position of the current stable navigations.\n                this.store[this.lastId] = this.viewportScroller.getScrollPosition();\n                this.lastSource = e.navigationTrigger;\n                this.restoredId = e.restoredState ? e.restoredState.navigationId : 0;\n            }\n            else if (e instanceof NavigationEnd) {\n                this.lastId = e.id;\n                this.scheduleScrollEvent(e, this.urlSerializer.parse(e.urlAfterRedirects).fragment);\n            }\n            else if (e instanceof NavigationSkipped &&\n                e.code === NavigationSkippedCode.IgnoredSameUrlNavigation) {\n                this.lastSource = undefined;\n                this.restoredId = 0;\n                this.scheduleScrollEvent(e, this.urlSerializer.parse(e.url).fragment);\n            }\n        });\n    }\n    consumeScrollEvents() {\n        return this.transitions.events.subscribe((e) => {\n            if (!(e instanceof Scroll))\n                return;\n            // a popstate event. The pop state event will always ignore anchor scrolling.\n            if (e.position) {\n                if (this.options.scrollPositionRestoration === 'top') {\n                    this.viewportScroller.scrollToPosition([0, 0]);\n                }\n                else if (this.options.scrollPositionRestoration === 'enabled') {\n                    this.viewportScroller.scrollToPosition(e.position);\n                }\n                // imperative navigation \"forward\"\n            }\n            else {\n                if (e.anchor && this.options.anchorScrolling === 'enabled') {\n                    this.viewportScroller.scrollToAnchor(e.anchor);\n                }\n                else if (this.options.scrollPositionRestoration !== 'disabled') {\n                    this.viewportScroller.scrollToPosition([0, 0]);\n                }\n            }\n        });\n    }\n    scheduleScrollEvent(routerEvent, anchor) {\n        this.zone.runOutsideAngular(() => {\n            // The scroll event needs to be delayed until after change detection. Otherwise, we may\n            // attempt to restore the scroll position before the router outlet has fully rendered the\n            // component by executing its update block of the template function.\n            setTimeout(() => {\n                this.zone.run(() => {\n                    this.transitions.events.next(new Scroll(routerEvent, this.lastSource === 'popstate' ? this.store[this.restoredId] : null, anchor));\n                });\n            }, 0);\n        });\n    }\n    /** @nodoc */\n    ngOnDestroy() {\n        this.routerEventsSubscription?.unsubscribe();\n        this.scrollEventsSubscription?.unsubscribe();\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.5\", ngImport: i0, type: RouterScroller, deps: \"invalid\", target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"19.2.5\", ngImport: i0, type: RouterScroller });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.5\", ngImport: i0, type: RouterScroller, decorators: [{\n            type: Injectable\n        }], ctorParameters: () => [{ type: UrlSerializer }, { type: NavigationTransitions }, { type: i3.ViewportScroller }, { type: i0.NgZone }, { type: undefined }] });\n\n/**\n * Sets up providers necessary to enable `Router` functionality for the application.\n * Allows to configure a set of routes as well as extra features that should be enabled.\n *\n * @usageNotes\n *\n * Basic example of how you can add a Router to your application:\n * ```ts\n * const appRoutes: Routes = [];\n * bootstrapApplication(AppComponent, {\n *   providers: [provideRouter(appRoutes)]\n * });\n * ```\n *\n * You can also enable optional features in the Router by adding functions from the `RouterFeatures`\n * type:\n * ```ts\n * const appRoutes: Routes = [];\n * bootstrapApplication(AppComponent,\n *   {\n *     providers: [\n *       provideRouter(appRoutes,\n *         withDebugTracing(),\n *         withRouterConfig({paramsInheritanceStrategy: 'always'}))\n *     ]\n *   }\n * );\n * ```\n *\n * @see {@link RouterFeatures}\n *\n * @publicApi\n * @param routes A set of `Route`s to use for the application routing table.\n * @param features Optional features to configure additional router behaviors.\n * @returns A set of providers to setup a Router.\n */\nfunction provideRouter(routes, ...features) {\n    return makeEnvironmentProviders([\n        { provide: ROUTES, multi: true, useValue: routes },\n        typeof ngDevMode === 'undefined' || ngDevMode\n            ? { provide: ROUTER_IS_PROVIDED, useValue: true }\n            : [],\n        { provide: ActivatedRoute, useFactory: rootRoute, deps: [Router] },\n        { provide: APP_BOOTSTRAP_LISTENER, multi: true, useFactory: getBootstrapListener },\n        features.map((feature) => feature.ɵproviders),\n    ]);\n}\nfunction rootRoute(router) {\n    return router.routerState.root;\n}\n/**\n * Helper function to create an object that represents a Router feature.\n */\nfunction routerFeature(kind, providers) {\n    return { ɵkind: kind, ɵproviders: providers };\n}\n/**\n * An Injection token used to indicate whether `provideRouter` or `RouterModule.forRoot` was ever\n * called.\n */\nconst ROUTER_IS_PROVIDED = new InjectionToken('', {\n    providedIn: 'root',\n    factory: () => false,\n});\nconst routerIsProvidedDevModeCheck = {\n    provide: ENVIRONMENT_INITIALIZER,\n    multi: true,\n    useFactory() {\n        return () => {\n            if (!inject(ROUTER_IS_PROVIDED)) {\n                console.warn('`provideRoutes` was called without `provideRouter` or `RouterModule.forRoot`. ' +\n                    'This is likely a mistake.');\n            }\n        };\n    },\n};\n/**\n * Registers a DI provider for a set of routes.\n * @param routes The route configuration to provide.\n *\n * @usageNotes\n *\n * ```ts\n * @NgModule({\n *   providers: [provideRoutes(ROUTES)]\n * })\n * class LazyLoadedChildModule {}\n * ```\n *\n * @deprecated If necessary, provide routes using the `ROUTES` `InjectionToken`.\n * @see {@link ROUTES}\n * @publicApi\n */\nfunction provideRoutes(routes) {\n    return [\n        { provide: ROUTES, multi: true, useValue: routes },\n        typeof ngDevMode === 'undefined' || ngDevMode ? routerIsProvidedDevModeCheck : [],\n    ];\n}\n/**\n * Enables customizable scrolling behavior for router navigations.\n *\n * @usageNotes\n *\n * Basic example of how you can enable scrolling feature:\n * ```ts\n * const appRoutes: Routes = [];\n * bootstrapApplication(AppComponent,\n *   {\n *     providers: [\n *       provideRouter(appRoutes, withInMemoryScrolling())\n *     ]\n *   }\n * );\n * ```\n *\n * @see {@link provideRouter}\n * @see {@link ViewportScroller}\n *\n * @publicApi\n * @param options Set of configuration parameters to customize scrolling behavior, see\n *     `InMemoryScrollingOptions` for additional information.\n * @returns A set of providers for use with `provideRouter`.\n */\nfunction withInMemoryScrolling(options = {}) {\n    const providers = [\n        {\n            provide: ROUTER_SCROLLER,\n            useFactory: () => {\n                const viewportScroller = inject(ViewportScroller);\n                const zone = inject(NgZone);\n                const transitions = inject(NavigationTransitions);\n                const urlSerializer = inject(UrlSerializer);\n                return new RouterScroller(urlSerializer, transitions, viewportScroller, zone, options);\n            },\n        },\n    ];\n    return routerFeature(4 /* RouterFeatureKind.InMemoryScrollingFeature */, providers);\n}\nfunction getBootstrapListener() {\n    const injector = inject(Injector);\n    return (bootstrappedComponentRef) => {\n        const ref = injector.get(ApplicationRef);\n        if (bootstrappedComponentRef !== ref.components[0]) {\n            return;\n        }\n        const router = injector.get(Router);\n        const bootstrapDone = injector.get(BOOTSTRAP_DONE);\n        if (injector.get(INITIAL_NAVIGATION) === 1 /* InitialNavigation.EnabledNonBlocking */) {\n            router.initialNavigation();\n        }\n        injector.get(ROUTER_PRELOADER, null, InjectFlags.Optional)?.setUpPreloading();\n        injector.get(ROUTER_SCROLLER, null, InjectFlags.Optional)?.init();\n        router.resetRootComponentType(ref.componentTypes[0]);\n        if (!bootstrapDone.closed) {\n            bootstrapDone.next();\n            bootstrapDone.complete();\n            bootstrapDone.unsubscribe();\n        }\n    };\n}\n/**\n * A subject used to indicate that the bootstrapping phase is done. When initial navigation is\n * `enabledBlocking`, the first navigation waits until bootstrapping is finished before continuing\n * to the activation phase.\n */\nconst BOOTSTRAP_DONE = new InjectionToken(typeof ngDevMode === 'undefined' || ngDevMode ? 'bootstrap done indicator' : '', {\n    factory: () => {\n        return new Subject();\n    },\n});\nconst INITIAL_NAVIGATION = new InjectionToken(typeof ngDevMode === 'undefined' || ngDevMode ? 'initial navigation' : '', { providedIn: 'root', factory: () => 1 /* InitialNavigation.EnabledNonBlocking */ });\n/**\n * Configures initial navigation to start before the root component is created.\n *\n * The bootstrap is blocked until the initial navigation is complete. This should be set in case\n * you use [server-side rendering](guide/ssr), but do not enable [hydration](guide/hydration) for\n * your application.\n *\n * @usageNotes\n *\n * Basic example of how you can enable this navigation behavior:\n * ```ts\n * const appRoutes: Routes = [];\n * bootstrapApplication(AppComponent,\n *   {\n *     providers: [\n *       provideRouter(appRoutes, withEnabledBlockingInitialNavigation())\n *     ]\n *   }\n * );\n * ```\n *\n * @see {@link provideRouter}\n *\n * @publicApi\n * @returns A set of providers for use with `provideRouter`.\n */\nfunction withEnabledBlockingInitialNavigation() {\n    const providers = [\n        { provide: INITIAL_NAVIGATION, useValue: 0 /* InitialNavigation.EnabledBlocking */ },\n        {\n            provide: APP_INITIALIZER,\n            multi: true,\n            deps: [Injector],\n            useFactory: (injector) => {\n                const locationInitialized = injector.get(LOCATION_INITIALIZED, Promise.resolve());\n                return () => {\n                    return locationInitialized.then(() => {\n                        return new Promise((resolve) => {\n                            const router = injector.get(Router);\n                            const bootstrapDone = injector.get(BOOTSTRAP_DONE);\n                            afterNextNavigation(router, () => {\n                                // Unblock APP_INITIALIZER in case the initial navigation was canceled or errored\n                                // without a redirect.\n                                resolve(true);\n                            });\n                            injector.get(NavigationTransitions).afterPreactivation = () => {\n                                // Unblock APP_INITIALIZER once we get to `afterPreactivation`. At this point, we\n                                // assume activation will complete successfully (even though this is not\n                                // guaranteed).\n                                resolve(true);\n                                return bootstrapDone.closed ? of(void 0) : bootstrapDone;\n                            };\n                            router.initialNavigation();\n                        });\n                    });\n                };\n            },\n        },\n    ];\n    return routerFeature(2 /* RouterFeatureKind.EnabledBlockingInitialNavigationFeature */, providers);\n}\n/**\n * Disables initial navigation.\n *\n * Use if there is a reason to have more control over when the router starts its initial navigation\n * due to some complex initialization logic.\n *\n * @usageNotes\n *\n * Basic example of how you can disable initial navigation:\n * ```ts\n * const appRoutes: Routes = [];\n * bootstrapApplication(AppComponent,\n *   {\n *     providers: [\n *       provideRouter(appRoutes, withDisabledInitialNavigation())\n *     ]\n *   }\n * );\n * ```\n *\n * @see {@link provideRouter}\n *\n * @returns A set of providers for use with `provideRouter`.\n *\n * @publicApi\n */\nfunction withDisabledInitialNavigation() {\n    const providers = [\n        {\n            provide: APP_INITIALIZER,\n            multi: true,\n            useFactory: () => {\n                const router = inject(Router);\n                return () => {\n                    router.setUpLocationChangeListener();\n                };\n            },\n        },\n        { provide: INITIAL_NAVIGATION, useValue: 2 /* InitialNavigation.Disabled */ },\n    ];\n    return routerFeature(3 /* RouterFeatureKind.DisabledInitialNavigationFeature */, providers);\n}\n/**\n * Enables logging of all internal navigation events to the console.\n * Extra logging might be useful for debugging purposes to inspect Router event sequence.\n *\n * @usageNotes\n *\n * Basic example of how you can enable debug tracing:\n * ```ts\n * const appRoutes: Routes = [];\n * bootstrapApplication(AppComponent,\n *   {\n *     providers: [\n *       provideRouter(appRoutes, withDebugTracing())\n *     ]\n *   }\n * );\n * ```\n *\n * @see {@link provideRouter}\n *\n * @returns A set of providers for use with `provideRouter`.\n *\n * @publicApi\n */\nfunction withDebugTracing() {\n    let providers = [];\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        providers = [\n            {\n                provide: ENVIRONMENT_INITIALIZER,\n                multi: true,\n                useFactory: () => {\n                    const router = inject(Router);\n                    return () => router.events.subscribe((e) => {\n                        // tslint:disable:no-console\n                        console.group?.(`Router Event: ${e.constructor.name}`);\n                        console.log(stringifyEvent(e));\n                        console.log(e);\n                        console.groupEnd?.();\n                        // tslint:enable:no-console\n                    });\n                },\n            },\n        ];\n    }\n    else {\n        providers = [];\n    }\n    return routerFeature(1 /* RouterFeatureKind.DebugTracingFeature */, providers);\n}\nconst ROUTER_PRELOADER = new InjectionToken(typeof ngDevMode === 'undefined' || ngDevMode ? 'router preloader' : '');\n/**\n * Allows to configure a preloading strategy to use. The strategy is configured by providing a\n * reference to a class that implements a `PreloadingStrategy`.\n *\n * @usageNotes\n *\n * Basic example of how you can configure preloading:\n * ```ts\n * const appRoutes: Routes = [];\n * bootstrapApplication(AppComponent,\n *   {\n *     providers: [\n *       provideRouter(appRoutes, withPreloading(PreloadAllModules))\n *     ]\n *   }\n * );\n * ```\n *\n * @see {@link provideRouter}\n *\n * @param preloadingStrategy A reference to a class that implements a `PreloadingStrategy` that\n *     should be used.\n * @returns A set of providers for use with `provideRouter`.\n *\n * @publicApi\n */\nfunction withPreloading(preloadingStrategy) {\n    const providers = [\n        { provide: ROUTER_PRELOADER, useExisting: RouterPreloader },\n        { provide: PreloadingStrategy, useExisting: preloadingStrategy },\n    ];\n    return routerFeature(0 /* RouterFeatureKind.PreloadingFeature */, providers);\n}\n/**\n * Allows to provide extra parameters to configure Router.\n *\n * @usageNotes\n *\n * Basic example of how you can provide extra configuration options:\n * ```ts\n * const appRoutes: Routes = [];\n * bootstrapApplication(AppComponent,\n *   {\n *     providers: [\n *       provideRouter(appRoutes, withRouterConfig({\n *          onSameUrlNavigation: 'reload'\n *       }))\n *     ]\n *   }\n * );\n * ```\n *\n * @see {@link provideRouter}\n *\n * @param options A set of parameters to configure Router, see `RouterConfigOptions` for\n *     additional information.\n * @returns A set of providers for use with `provideRouter`.\n *\n * @publicApi\n */\nfunction withRouterConfig(options) {\n    const providers = [{ provide: ROUTER_CONFIGURATION, useValue: options }];\n    return routerFeature(5 /* RouterFeatureKind.RouterConfigurationFeature */, providers);\n}\n/**\n * Provides the location strategy that uses the URL fragment instead of the history API.\n *\n * @usageNotes\n *\n * Basic example of how you can use the hash location option:\n * ```ts\n * const appRoutes: Routes = [];\n * bootstrapApplication(AppComponent,\n *   {\n *     providers: [\n *       provideRouter(appRoutes, withHashLocation())\n *     ]\n *   }\n * );\n * ```\n *\n * @see {@link provideRouter}\n * @see {@link /api/common/HashLocationStrategy HashLocationStrategy}\n *\n * @returns A set of providers for use with `provideRouter`.\n *\n * @publicApi\n */\nfunction withHashLocation() {\n    const providers = [{ provide: LocationStrategy, useClass: HashLocationStrategy }];\n    return routerFeature(6 /* RouterFeatureKind.RouterHashLocationFeature */, providers);\n}\n/**\n * Provides a function which is called when a navigation error occurs.\n *\n * This function is run inside application's [injection context](guide/di/dependency-injection-context)\n * so you can use the [`inject`](api/core/inject) function.\n *\n * This function can return a `RedirectCommand` to convert the error to a redirect, similar to returning\n * a `UrlTree` or `RedirectCommand` from a guard. This will also prevent the `Router` from emitting\n * `NavigationError`; it will instead emit `NavigationCancel` with code NavigationCancellationCode.Redirect.\n * Return values other than `RedirectCommand` are ignored and do not change any behavior with respect to\n * how the `Router` handles the error.\n *\n * @usageNotes\n *\n * Basic example of how you can use the error handler option:\n * ```ts\n * const appRoutes: Routes = [];\n * bootstrapApplication(AppComponent,\n *   {\n *     providers: [\n *       provideRouter(appRoutes, withNavigationErrorHandler((e: NavigationError) =>\n * inject(MyErrorTracker).trackError(e)))\n *     ]\n *   }\n * );\n * ```\n *\n * @see {@link NavigationError}\n * @see {@link /api/core/inject inject}\n * @see {@link runInInjectionContext}\n *\n * @returns A set of providers for use with `provideRouter`.\n *\n * @publicApi\n */\nfunction withNavigationErrorHandler(handler) {\n    const providers = [\n        {\n            provide: NAVIGATION_ERROR_HANDLER,\n            useValue: handler,\n        },\n    ];\n    return routerFeature(7 /* RouterFeatureKind.NavigationErrorHandlerFeature */, providers);\n}\n/**\n * Enables binding information from the `Router` state directly to the inputs of the component in\n * `Route` configurations.\n *\n * @usageNotes\n *\n * Basic example of how you can enable the feature:\n * ```ts\n * const appRoutes: Routes = [];\n * bootstrapApplication(AppComponent,\n *   {\n *     providers: [\n *       provideRouter(appRoutes, withComponentInputBinding())\n *     ]\n *   }\n * );\n * ```\n *\n * The router bindings information from any of the following sources:\n *\n *  - query parameters\n *  - path and matrix parameters\n *  - static route data\n *  - data from resolvers\n *\n * Duplicate keys are resolved in the same order from above, from least to greatest,\n * meaning that resolvers have the highest precedence and override any of the other information\n * from the route.\n *\n * Importantly, when an input does not have an item in the route data with a matching key, this\n * input is set to `undefined`. This prevents previous information from being\n * retained if the data got removed from the route (i.e. if a query parameter is removed).\n * Default values can be provided with a resolver on the route to ensure the value is always present\n * or an input and use an input transform in the component.\n *\n * @see {@link /guide/components/inputs#input-transforms Input Transforms}\n * @returns A set of providers for use with `provideRouter`.\n */\nfunction withComponentInputBinding() {\n    const providers = [\n        RoutedComponentInputBinder,\n        { provide: INPUT_BINDER, useExisting: RoutedComponentInputBinder },\n    ];\n    return routerFeature(8 /* RouterFeatureKind.ComponentInputBindingFeature */, providers);\n}\n/**\n * Enables view transitions in the Router by running the route activation and deactivation inside of\n * `document.startViewTransition`.\n *\n * Note: The View Transitions API is not available in all browsers. If the browser does not support\n * view transitions, the Router will not attempt to start a view transition and continue processing\n * the navigation as usual.\n *\n * @usageNotes\n *\n * Basic example of how you can enable the feature:\n * ```ts\n * const appRoutes: Routes = [];\n * bootstrapApplication(AppComponent,\n *   {\n *     providers: [\n *       provideRouter(appRoutes, withViewTransitions())\n *     ]\n *   }\n * );\n * ```\n *\n * @returns A set of providers for use with `provideRouter`.\n * @see https://developer.chrome.com/docs/web-platform/view-transitions/\n * @see https://developer.mozilla.org/en-US/docs/Web/API/View_Transitions_API\n * @developerPreview\n */\nfunction withViewTransitions(options) {\n    const providers = [\n        { provide: CREATE_VIEW_TRANSITION, useValue: createViewTransition },\n        {\n            provide: VIEW_TRANSITION_OPTIONS,\n            useValue: { skipNextTransition: !!options?.skipInitialTransition, ...options },\n        },\n    ];\n    return routerFeature(9 /* RouterFeatureKind.ViewTransitionsFeature */, providers);\n}\n\n/**\n * The directives defined in the `RouterModule`.\n */\nconst ROUTER_DIRECTIVES = [RouterOutlet, RouterLink, RouterLinkActive, _EmptyOutletComponent];\n/**\n * @docsNotRequired\n */\nconst ROUTER_FORROOT_GUARD = new InjectionToken(typeof ngDevMode === 'undefined' || ngDevMode ? 'router duplicate forRoot guard' : '');\n// TODO(atscott): All of these except `ActivatedRoute` are `providedIn: 'root'`. They are only kept\n// here to avoid a breaking change whereby the provider order matters based on where the\n// `RouterModule`/`RouterTestingModule` is imported. These can/should be removed as a \"breaking\"\n// change in a major version.\nconst ROUTER_PROVIDERS = [\n    Location,\n    { provide: UrlSerializer, useClass: DefaultUrlSerializer },\n    Router,\n    ChildrenOutletContexts,\n    { provide: ActivatedRoute, useFactory: rootRoute, deps: [Router] },\n    RouterConfigLoader,\n    // Only used to warn when `provideRoutes` is used without `RouterModule` or `provideRouter`. Can\n    // be removed when `provideRoutes` is removed.\n    typeof ngDevMode === 'undefined' || ngDevMode\n        ? { provide: ROUTER_IS_PROVIDED, useValue: true }\n        : [],\n];\n/**\n * @description\n *\n * Adds directives and providers for in-app navigation among views defined in an application.\n * Use the Angular `Router` service to declaratively specify application states and manage state\n * transitions.\n *\n * You can import this NgModule multiple times, once for each lazy-loaded bundle.\n * However, only one `Router` service can be active.\n * To ensure this, there are two ways to register routes when importing this module:\n *\n * * The `forRoot()` method creates an `NgModule` that contains all the directives, the given\n * routes, and the `Router` service itself.\n * * The `forChild()` method creates an `NgModule` that contains all the directives and the given\n * routes, but does not include the `Router` service.\n *\n * @see [Routing and Navigation guide](guide/routing/common-router-tasks) for an\n * overview of how the `Router` service should be used.\n *\n * @publicApi\n */\nclass RouterModule {\n    constructor() {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            inject(ROUTER_FORROOT_GUARD, { optional: true });\n        }\n    }\n    /**\n     * Creates and configures a module with all the router providers and directives.\n     * Optionally sets up an application listener to perform an initial navigation.\n     *\n     * When registering the NgModule at the root, import as follows:\n     *\n     * ```ts\n     * @NgModule({\n     *   imports: [RouterModule.forRoot(ROUTES)]\n     * })\n     * class MyNgModule {}\n     * ```\n     *\n     * @param routes An array of `Route` objects that define the navigation paths for the application.\n     * @param config An `ExtraOptions` configuration object that controls how navigation is performed.\n     * @return The new `NgModule`.\n     *\n     */\n    static forRoot(routes, config) {\n        return {\n            ngModule: RouterModule,\n            providers: [\n                ROUTER_PROVIDERS,\n                typeof ngDevMode === 'undefined' || ngDevMode\n                    ? config?.enableTracing\n                        ? withDebugTracing().ɵproviders\n                        : []\n                    : [],\n                { provide: ROUTES, multi: true, useValue: routes },\n                typeof ngDevMode === 'undefined' || ngDevMode\n                    ? {\n                        provide: ROUTER_FORROOT_GUARD,\n                        useFactory: provideForRootGuard,\n                        deps: [[Router, new Optional(), new SkipSelf()]],\n                    }\n                    : [],\n                config?.errorHandler\n                    ? {\n                        provide: NAVIGATION_ERROR_HANDLER,\n                        useValue: config.errorHandler,\n                    }\n                    : [],\n                { provide: ROUTER_CONFIGURATION, useValue: config ? config : {} },\n                config?.useHash ? provideHashLocationStrategy() : providePathLocationStrategy(),\n                provideRouterScroller(),\n                config?.preloadingStrategy ? withPreloading(config.preloadingStrategy).ɵproviders : [],\n                config?.initialNavigation ? provideInitialNavigation(config) : [],\n                config?.bindToComponentInputs ? withComponentInputBinding().ɵproviders : [],\n                config?.enableViewTransitions ? withViewTransitions().ɵproviders : [],\n                provideRouterInitializer(),\n            ],\n        };\n    }\n    /**\n     * Creates a module with all the router directives and a provider registering routes,\n     * without creating a new Router service.\n     * When registering for submodules and lazy-loaded submodules, create the NgModule as follows:\n     *\n     * ```ts\n     * @NgModule({\n     *   imports: [RouterModule.forChild(ROUTES)]\n     * })\n     * class MyNgModule {}\n     * ```\n     *\n     * @param routes An array of `Route` objects that define the navigation paths for the submodule.\n     * @return The new NgModule.\n     *\n     */\n    static forChild(routes) {\n        return {\n            ngModule: RouterModule,\n            providers: [{ provide: ROUTES, multi: true, useValue: routes }],\n        };\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.5\", ngImport: i0, type: RouterModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"19.2.5\", ngImport: i0, type: RouterModule, imports: [RouterOutlet, RouterLink, RouterLinkActive, _EmptyOutletComponent], exports: [RouterOutlet, RouterLink, RouterLinkActive, _EmptyOutletComponent] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"19.2.5\", ngImport: i0, type: RouterModule });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.5\", ngImport: i0, type: RouterModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: ROUTER_DIRECTIVES,\n                    exports: ROUTER_DIRECTIVES,\n                }]\n        }], ctorParameters: () => [] });\n/**\n * For internal use by `RouterModule` only. Note that this differs from `withInMemoryRouterScroller`\n * because it reads from the `ExtraOptions` which should not be used in the standalone world.\n */\nfunction provideRouterScroller() {\n    return {\n        provide: ROUTER_SCROLLER,\n        useFactory: () => {\n            const viewportScroller = inject(ViewportScroller);\n            const zone = inject(NgZone);\n            const config = inject(ROUTER_CONFIGURATION);\n            const transitions = inject(NavigationTransitions);\n            const urlSerializer = inject(UrlSerializer);\n            if (config.scrollOffset) {\n                viewportScroller.setOffset(config.scrollOffset);\n            }\n            return new RouterScroller(urlSerializer, transitions, viewportScroller, zone, config);\n        },\n    };\n}\n// Note: For internal use only with `RouterModule`. Standalone setup via `provideRouter` should\n// provide hash location directly via `{provide: LocationStrategy, useClass: HashLocationStrategy}`.\nfunction provideHashLocationStrategy() {\n    return { provide: LocationStrategy, useClass: HashLocationStrategy };\n}\n// Note: For internal use only with `RouterModule`. Standalone setup via `provideRouter` does not\n// need this at all because `PathLocationStrategy` is the default factory for `LocationStrategy`.\nfunction providePathLocationStrategy() {\n    return { provide: LocationStrategy, useClass: PathLocationStrategy };\n}\nfunction provideForRootGuard(router) {\n    if (router) {\n        throw new _RuntimeError(4007 /* RuntimeErrorCode.FOR_ROOT_CALLED_TWICE */, `The Router was provided more than once. This can happen if 'forRoot' is used outside of the root injector.` +\n            ` Lazy loaded modules should use RouterModule.forChild() instead.`);\n    }\n    return 'guarded';\n}\n// Note: For internal use only with `RouterModule`. Standalone router setup with `provideRouter`\n// users call `withXInitialNavigation` directly.\nfunction provideInitialNavigation(config) {\n    return [\n        config.initialNavigation === 'disabled' ? withDisabledInitialNavigation().ɵproviders : [],\n        config.initialNavigation === 'enabledBlocking'\n            ? withEnabledBlockingInitialNavigation().ɵproviders\n            : [],\n    ];\n}\n// TODO(atscott): This should not be in the public API\n/**\n * A DI token for the router initializer that\n * is called after the app is bootstrapped.\n *\n * @publicApi\n */\nconst ROUTER_INITIALIZER = new InjectionToken(typeof ngDevMode === 'undefined' || ngDevMode ? 'Router Initializer' : '');\nfunction provideRouterInitializer() {\n    return [\n        // ROUTER_INITIALIZER token should be removed. It's public API but shouldn't be. We can just\n        // have `getBootstrapListener` directly attached to APP_BOOTSTRAP_LISTENER.\n        { provide: ROUTER_INITIALIZER, useFactory: getBootstrapListener },\n        { provide: APP_BOOTSTRAP_LISTENER, multi: true, useExisting: ROUTER_INITIALIZER },\n    ];\n}\n\nexport { NoPreloading as N, PreloadAllModules as P, RouterLink as R, RouterLinkActive as a, provideRoutes as b, withComponentInputBinding as c, withDebugTracing as d, withDisabledInitialNavigation as e, withEnabledBlockingInitialNavigation as f, withHashLocation as g, withInMemoryScrolling as h, withNavigationErrorHandler as i, withPreloading as j, withRouterConfig as k, ROUTER_INITIALIZER as l, RouterModule as m, PreloadingStrategy as n, RouterPreloader as o, provideRouter as p, ROUTER_PROVIDERS as q, withViewTransitions as w };\n"],"mappings":"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;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMI,gBAAgB,CAAC;EACnBxF,MAAM;EACNyF,OAAO;EACPtF,QAAQ;EACRuF,GAAG;EACHC,IAAI;EACJC,KAAK;EACLC,OAAO,GAAG,EAAE;EACZC,wBAAwB;EACxBC,4BAA4B;EAC5BC,SAAS,GAAG,KAAK;EACjB,IAAIC,QAAQA,CAAA,EAAG;IACX,OAAO,IAAI,CAACD,SAAS;EACzB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIE,uBAAuB,GAAG;IAAEC,KAAK,EAAE;EAAM,CAAC;EAC1C;AACJ;AACA;AACA;AACA;AACA;AACA;EACIC,qBAAqB;EACrB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,cAAc,GAAG,IAAIlL,YAAY,CAAC,CAAC;EACnC8F,WAAWA,CAACjB,MAAM,EAAEyF,OAAO,EAAEtF,QAAQ,EAAEuF,GAAG,EAAEC,IAAI,EAAE;IAC9C,IAAI,CAAC3F,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACyF,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACtF,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACuF,GAAG,GAAGA,GAAG;IACd,IAAI,CAACC,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACG,wBAAwB,GAAG9F,MAAM,CAACqB,MAAM,CAACC,SAAS,CAAEC,CAAC,IAAK;MAC3D,IAAIA,CAAC,YAAYjF,aAAa,EAAE;QAC5B,IAAI,CAACgK,MAAM,CAAC,CAAC;MACjB;IACJ,CAAC,CAAC;EACN;EACA;EACAC,kBAAkBA,CAAA,EAAG;IACjB;IACA/G,EAAE,CAAC,IAAI,CA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AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS4G,gBAAgBA,CAACpJ,OAAO,EAAE;EAC/B,MAAMwC,SAAS,GAAG,CAAC;IAAE4D,OAAO,EAAEjQ,oBAAoB;IAAEmQ,QAAQ,EAAEtG;EAAQ,CAAC,CAAC;EACxE,OAAOgH,aAAa,CAAC,CAAC,CAAC,oDAAoDxE,SAAS,CAAC;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS6G,gBAAgBA,CAAA,EAAG;EACxB,MAAM7G,SAAS,GAAG,CAAC;IAAE4D,OAAO,EAAE5T,gBAAgB;IAAE8W,QAAQ,EAAE/W;EAAqB,CAAC,CAAC;EACjF,OAAOyU,aAAa,CAAC,CAAC,CAAC,mDAAmDxE,SAAS,CAAC;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS+G,0BAA0BA,CAACC,OAAO,EAAE;EACzC,MAAMhH,SAAS,GAAG,CACd;IACI4D,OAAO,EAAE/P,wBAAwB;IACjCiQ,QAAQ,EAAEkD;EACd,CAAC,CACJ;EACD,OAAOxC,aAAa,CAAC,CAAC,CAAC,uDAAuDxE,SAAS,CAAC;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASiH,yBAAyBA,CAAA,EAAG;EACjC,MAAMjH,SAAS,GAAG,CACdjM,0BAA0B,EAC1B;IAAE6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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}